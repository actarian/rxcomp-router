{"version":3,"sources":["www/browser/src/main.browser.ts","../../src/core/view.ts","../../src/route/route-activators.ts","../../src/route/route-segment.ts","../../src/route/route.ts","../../src/route/route-path.ts","../../src/route/route-snapshot.ts","../../src/router/router-events.ts","../../src/router/router.service.ts","../../src/router/router-link.directive.ts","../../src/router/router-link-active.directive.ts","../../src/router/router-outlet.structure.ts","../../src/router.module.ts","../../src/transition/transition.ts","../../www/browser/src/app.component.ts","../../www/browser/src/custom-activator/custom-activator.ts","../../www/browser/src/pages/contacts.component.ts","../../www/browser/src/pages/data.component.ts","../../www/browser/src/pages/detail.component.ts","../../www/browser/src/pages/index.component.ts","../../www/browser/src/pages/not-found.component.ts","../../www/browser/src/pages/sub.component.ts","../../www/browser/src/app.module.ts","../../www/browser/src/main.browser.ts"],"names":["rxcomp","rxjs","operators","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_defineProperty","obj","value","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","toString","call","slice","name","from","test","_unsupportedIterableToArray","done","TypeError","next","bind","View","_Component","this","_proto","onEnter","node","of","onExit","Component","isPromise","Promise","makeObserver$_","callback","Observable","observer","subscription","result","isObservable","subscribe","complete","then","error","Error","unsubscribe","RouteSegment","path","params","encodeSegment_","encodeParams_","map","join","s","encodeURIComponent","replace","encodeString_","Route","options","_this","pathMatch","relative","canDeactivate","canLoad","canActivate","canActivateChild","assign","x","activator","component","currentRoute","route","segments","childRoute","children","iRoute","parent","matcher","RegExp","_step","matchers","_iterator","matchAll","match","g1","g2","g3","param","regexp","RoutePath","url","routeSegments","snapshot","get","url_","set","query","hash","regExp","search","substring","split","resolvePath_","routeSegments_","segment","index","encoded","decoded","indexOf","json","window","atob","JSON","parse","Number","decodeParams_","resolveParams_","RouteSnapshot","data$","ReplaySubject","params$","queryParams$","data","queryParams","RouterEvent","routerLink","NavigationStart","_RouterEvent","RoutesRecognized","_RouterEvent2","GuardsCheckStart","_RouterEvent3","ChildActivationStart","_RouterEvent4","ActivationStart","_RouterEvent5","GuardsCheckEnd","_RouterEvent6","ResolveStart","_RouterEvent7","ResolveEnd","_RouterEvent8","ActivationEnd","_RouterEvent9","ChildActivationEnd","_RouterEvent10","RouteConfigLoadStart","_RouterEvent11","RouteConfigLoadEnd","_RouterEvent12","NavigationEnd","_RouterEvent13","NavigationCancel","_RouterEvent14","NavigationError","_RouterEvent15","RouterService","setRoutes","routes","observe$","makeObserve$_","route$","events$","setRouterLink","extras","trigger","navigate","findRoute","initialUrl","serializeUrl_","findRouteByUrl","resolvedRoute","getFlatRoutes_","find","urlAfterRedirects","redirectTo","getPath","lastPath","stringify","btoa","console","log","r","unshift","extractedUrl","undefined","reduceRoutes","reduce","p","c","resolveRoutes_","childRoutes","resolveRoute_","_route$children","remainUrl","makeActivatorResponse$_","event","activators","combineLatest","pipe","values","cancelEvent","reason","stateEvents$","merge","fromEvent","tap","document","location","pathname","state","shareReplay","switchMap","instance","makeCanDeactivateResponse$_","nextEvent","makeCanLoadResponse$_","routeActivators","reduceChildRouteActivators_","makeCanActivateChildResponse$_","makeCanActivateResponse$_","_currentRoute$childre","_source$extractedUrl","_source$remainUrl","currentSnapshot","snapshots","getFlatSnapshots_","clearRoutes_","popped","isPlatformBrowser","history","pushState","title","replaceState","setHistory_","catchError","RouterLinkDirective","_Directive","getSegments","item","components","onInit","getContext","takeUntil","unsubscribe$","navigationExtras","skipLocationChange","replaceUrl","preventDefault","onChanges","routePath","routerLink_","setAttribute","Directive","selector","inputs","RouterLinkActiveDirective","classList","remove","isActive","routerLinkActive","add","_path$route","host","hosts","RouterOutletStructure","_Structure","route$_","_this$host$route","_this2","factory$","_this$host$route2","_this3","route_","snapshot_","_this4","_getContext","module","factory","factory_","onExit$_","element","parentNode","removeChild","meta","template","createElement","innerHTML","firstElementChild","appendChild","makeInstance","compile","onEnter$_","asObservable_","_getContext2","Structure","args","factories","pipes","RouterModule","_Module","_this$instances","instances","pushChanges","forRoot","Module","transition$","delay","declarations","concat","exports","AppComponent","errors$","customActivator","CustomActivator","ContactsComponent","DataComponent","datas","DetailComponent","_View","detailId","gsap","opacity","to","duration","ease","Power3","easeInOut","onComplete","IndexComponent","NotFoundComponent","SubComponent","AppModule","imports","CoreModule","bootstrap","Browser"],"mappings":"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","file":"docs/js/main.min.js","sourcesContent":[null,"\nimport { Component, IElement } from 'rxcomp';\nimport { Observable, of } from 'rxjs';\n\nexport default class View extends Component {\n\n    onEnter(node: IElement): Observable<boolean> | Promise<boolean> | (() => boolean) | boolean { return of(true); }\n    onExit(node: IElement): Observable<boolean> | Promise<boolean> | (() => boolean) | boolean { return of(true); }\n\n}\n","import { isObservable, Observable, Observer, Subscription } from 'rxjs';\nimport { RouteComponent, RouterActivatorResult } from '../router.types';\nimport { RouteSegment } from './route-segment';\nimport { RouteSnapshot } from './route-snapshot';\n\nexport interface ICanDeactivate<T> {\n    canDeactivate(component: T, currentRoute: RouteSnapshot): RouterActivatorResult\n}\n\nexport interface ICanLoad {\n    canLoad(route: RouteSnapshot, segments: RouteSegment[]): RouterActivatorResult\n}\n\nexport interface ICanActivate {\n    canActivate(route: RouteSnapshot): RouterActivatorResult\n}\n\nexport interface ICanActivateChild {\n    canActivateChild(childRoute: RouteSnapshot): RouterActivatorResult\n}\n\nexport function mapCanDeactivate$_<T>(activator: ICanDeactivate<T>): (component: T, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canDeactivate$(component: T, currentRoute: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canDeactivate(component, currentRoute));\n    };\n}\nexport function mapCanLoad$_(activator: ICanLoad): (route: RouteSnapshot, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]> {\n    return function canLoad$$(route: RouteSnapshot, segments: RouteSegment[]): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canLoad(route, segments));\n    };\n}\nexport function mapCanActivate$_(activator: ICanActivate): (route: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canActivate$(route: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canActivate(route));\n    };\n}\nexport function mapCanActivateChild$_(activator: ICanActivateChild): (childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canActivateChild$(childRoute: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canActivateChild(childRoute));\n    };\n}\nexport function isPromise<T>(object: any): object is Promise<T> {\n    return object instanceof Promise || (typeof object === 'object' && 'then' in object && typeof object['then'] === 'function');\n}\n\nfunction makeObserver$_(callback: () => RouterActivatorResult) {\n    return Observable.create(function (observer: Observer<boolean | RouteComponent[]>) {\n        let subscription: Subscription;\n        try {\n            let result: RouterActivatorResult = callback();\n            if (isObservable(result)) {\n                subscription = result.subscribe(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (isPromise<boolean | RouteComponent[]>(result)) {\n                (result as Promise<boolean | RouteComponent[]>).then(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (typeof result === 'boolean' || Array.isArray(result)) {\n                observer.next(result);\n                observer.complete();\n            } else {\n                observer.error(new Error('invalid value'));\n            }\n        } catch (error) {\n            observer.error(error);\n        }\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n    });\n}\n\n","import { RouterKeyValue } from '../router.types';\n\nexport class RouteSegment {\n    path: string;\n    params: any;\n    constructor(path: string, params: RouterKeyValue = {}) {\n        this.path = path;\n        this.params = params;\n    }\n    toString(): string {\n        return `${encodeSegment_(this.path)}${encodeParams_(this.params)}`;\n    }\n}\n\nexport function encodeParams_(params: RouterKeyValue): string {\n    // !!! array?\n    return Object.keys(params).map(key => `;${encodeSegment_(key)}=${typeof params[key] === 'string' ? encodeSegment_(params[key] as string) : encodeParams_(params[key] as RouterKeyValue)}`).join('');\n}\n\nexport function encodeSegment_(s: string): string {\n    return encodeString_(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function encodeString_(s: string): string {\n    return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n\nexport function decodeParams_(encodedParams: string): RouterKeyValue {\n    const params: RouterKeyValue = {} as RouterKeyValue;\n    const keyValues = encodedParams.split(';');\n    keyValues.forEach((x: string) => {\n        const kvs: string[] = x.split('=');\n        if (kvs.length === 2) {\n            params[kvs[0]] = kvs[1];\n        }\n    });\n    return params;\n}\n\nexport function decodeParams__<T>(encoded: string | null = null): T | null {\n    let decoded = null;\n    if (encoded) {\n        try {\n            const json = window.atob(encoded);\n            decoded = JSON.parse(json) as T;\n        } catch (error) {\n            console.log('decodeParam_.error', error);\n        }\n    }\n    return decoded;\n}\n\nexport function encodeParams__(value: any): string | null {\n    let encoded = null;\n    try {\n        const json = JSON.stringify(value);\n        encoded = window.btoa(json);\n    } catch (error) {\n        console.log('encodeParam__.error', error);\n    }\n    return encoded;\n}\n\nexport function resolveParams__(url: string, routeSegments: RouteSegment[]): RouterKeyValue {\n    // console.log('resolveParams__.resolvedRoute.routeSegments', routeSegments);\n    const path: string = url.split('?')[0];\n    const query: string = url.substring(path.length, url.length);\n    const search: string = query.split('#')[0];\n    const hash: string = query.substring(search.length, query.length);\n    const segments: string[] = path.split('/').filter(x => x !== '');\n    const params: RouterKeyValue = {};\n    routeSegments.forEach((segment: RouteSegment, index: number) => {\n        // console.log('segment.params', segment.params);\n        const keys: string[] = Object.keys(segment.params);\n        if (keys.length) {\n            params[keys[0]] = decodeParams_(segments[index]);\n        }\n    });\n    return params;\n}\n","import { Component, Factory } from 'rxcomp';\nimport { Observable } from 'rxjs';\nimport { Data, RouteComponent, RouterKeyValue, RouterLink } from '../router.types';\nimport { ICanActivate, ICanActivateChild, ICanDeactivate, ICanLoad, mapCanActivate$_, mapCanActivateChild$_, mapCanDeactivate$_, mapCanLoad$_ } from './route-activators';\nimport { encodeParams_, RouteSegment } from './route-segment';\nimport { RouteSnapshot } from './route-snapshot';\n\nexport type IRoutes = IRoute[];\nexport type Routes = Route[];\n\nexport interface INavigationExtras {\n    relativeTo?: RouteSnapshot | null;\n    queryParams?: RouterKeyValue; // Params | null;\n    fragment?: string;\n    preserveQueryParams?: boolean;\n    queryParamsHandling?: any; // QueryParamsHandling | null;\n    preserveFragment?: boolean;\n    skipLocationChange?: boolean;\n    replaceUrl?: boolean;\n    state?: { [key: string]: any };\n}\n\nexport interface IBaseRoute {\n    path?: string;\n    pathMatch?: 'prefix' | 'full';\n    component?: typeof Component;\n    // matcher?: UrlMatcher;\n    matcher?: RegExp;\n    redirectTo?: string;\n    outlet?: string;\n    children?: IRoutes | Routes;\n    // children?: IRoute[];\n    initialUrl?: string;\n    urlAfterRedirects?: string;\n    extractedUrl?: string;\n    remainUrl?: string;\n    // resolve?: ResolveData;\n    // loadChildren?: LoadChildren;\n    // runGuardsAndResolvers?: RunGuardsAndResolvers;\n    data?: Data;\n    params?: RouterKeyValue;\n    queryParams?: RouterKeyValue;\n}\n\nexport interface IRoute extends IBaseRoute {\n    canActivate?: ICanActivate[];\n    canActivateChild?: ICanActivateChild[];\n    canDeactivate?: ICanDeactivate<Component>[];\n    canLoad?: ICanLoad[];\n}\n\nexport class Route implements IBaseRoute {\n    path!: string;\n    pathMatch: 'prefix' | 'full' = 'prefix';\n    component!: typeof Component; // import !!!\n    matcher: RegExp;\n    redirectTo?: string;\n    segments: RouteSegment[];\n    relative: boolean = true;\n    children?: Routes;\n    parent?: Route;\n    snapshot?: RouteSnapshot;\n    canDeactivate: ((component: Factory, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canLoad: ((route: RouteSnapshot, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivate: ((route: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivateChild: ((childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    constructor(options?: IRoute) {\n        if (options) {\n            Object.assign(this, options);\n            this.canDeactivate = options.canDeactivate ? options.canDeactivate.map(x => mapCanDeactivate$_<Component>(x)) : [];\n            this.canLoad = options.canLoad ? options.canLoad.map(x => mapCanLoad$_(x)) : [];\n            this.canActivate = options.canActivate ? options.canActivate.map(x => mapCanActivate$_(x)) : [];\n            this.canActivateChild = options.canActivateChild ? options.canActivateChild.map(x => mapCanActivateChild$_(x)) : [];\n        }\n        if (this.children) {\n            this.children = this.children.map((iRoute: IBaseRoute) => {\n                const route = new Route(iRoute);\n                route.parent = this;\n                return route;\n            });\n        }\n        const segments: RouteSegment[] = [];\n        if (this.path === '**') {\n            segments.push(new RouteSegment(this.path));\n            this.matcher = new RegExp('^.*$');\n        } else {\n            const matchers: string[] = ['^(^\\.\\.\\/|\\.\\/|\\/\\/|\\/)?'];\n            const regExp: RegExp = /(^\\.\\.\\/|\\.\\/|\\/\\/|\\/)|([^:|\\/]+)\\/?|\\:([^\\/]+)\\/?/g;\n            const matches = this.path.matchAll(regExp);\n            for (let match of matches) {\n                const g1 = match[1];\n                const g2 = match[2];\n                const g3 = match[3];\n                if (g1) {\n                    this.relative = !(g1 === '//' || g1 === '/');\n                } else if (g2) {\n                    matchers.push(g2);\n                    segments.push(new RouteSegment(g2));\n                } else if (g3) {\n                    matchers.push('(\\/[^\\/]+)');\n                    const param: { [key: string]: any } = {};\n                    param[g3] = null;\n                    segments.push(new RouteSegment('', param));\n                }\n            }\n            if (this.pathMatch === 'full') {\n                matchers.push('$');\n            }\n            const regexp: string = matchers.join('');\n            this.matcher = new RegExp(regexp);\n        }\n        this.segments = segments;\n    }\n}\n\nexport function serializeUrl_(routerLink: RouterLink): string {\n    const segments: any[] = Array.isArray(routerLink) ? routerLink : [routerLink];\n    return segments.map(x => {\n        return typeof x === 'string' ? x : encodeParams_(x);\n    }).join('/');\n}\n\n/*\nfunction isCanActivate(object: any): object is ICanActivate {\n    return 'canActivate' in object;\n}\nfunction isCanActivateChild(object: any): object is ICanActivate {\n    return 'canActivateChild' in object;\n}\nfunction isCanDeactivate(object: any): object is ICanActivate {\n    return 'canDeactivate' in object;\n}\nfunction isCanLoad(object: any): object is ICanActivate {\n    return 'canLoad' in object;\n}\n\nfunction mapActivators__(options: IRoute, key: 'canActivate' | 'canActivateChild' | 'canDeactivate' | 'canLoad'): Observable<boolean | RouteComponent[]>[] {\n    const activators: ICanActivate[] | ICanActivateChild[] | ICanDeactivate<Component>[] | ICanLoad[] | undefined = options[key];\n    if (activators) {\n        return activators.map<Observable<boolean | RouteComponent[]>>((activator: ICanActivate | ICanActivateChild | ICanDeactivate<Component> | ICanLoad) => {\n            return Observable.create(function (observer: Observer<boolean | RouteComponent[]>) {\n                try {\n                    let result: boolean | RouteComponent[] = false;\n                    if (isCanActivate(activator)) {\n                        result = activator.canActivate(route);\n                    }\n                    observer.next(result);\n                    observer.complete();\n                } catch (error) {\n                    observer.error(error);\n                }\n            });\n            if (isObservable(x)) {\n                return x;\n            } else if (typeof x === 'function') {\n                return Observable.create((function (observer: Observer<boolean>) {\n                    try {\n                        const result: boolean = x();\n                        observer.next(result);\n                        observer.complete();\n                    } catch (error) {\n                        observer.error(error);\n                    }\n                }))\n            } else if (typeof x === 'boolean') {\n                return of(x);\n            }\n        });\n    } else {\n        return [];\n    }\n}\n\nfunction mapActivators_(activators?: RouterActivator[]): Observable<boolean | RouteComponent[]>[] {\n    if (activators) {\n        return activators.map<Observable<boolean>>((x: RouterActivator) => {\n            if (isObservable(x)) {\n                return x;\n            } else if (typeof x === 'function') {\n                return Observable.create((function (observer: Observer<boolean>) {\n                    try {\n                        const result: boolean = x();\n                        observer.next(result);\n                        observer.complete();\n                    } catch (error) {\n                        observer.error(error);\n                    }\n                }))\n            } else if (typeof x === 'boolean') {\n                return of(x);\n            }\n        });\n    } else {\n        return [];\n    }\n}\n*/\n\n/*\nresolve(initialUrl: string): RouteSnapshot | undefined {\n    let urlAfterRedirects!: string;\n    let extractedUrl: string = '';\n    let remainUrl: string = initialUrl;\n    let route: Route | undefined;\n    const match: RegExpMatchArray | null = initialUrl.match(this.matcher);\n    // console.log('match', initialUrl, match, this.matcher);\n    if (match !== null) {\n        extractedUrl = match[0];\n        remainUrl = initialUrl.substring(match[0].length, initialUrl.length);\n        route = this;\n    }\n    while (route && route.redirectTo) {\n        urlAfterRedirects = route.redirectTo;\n        initialUrl = serializeUrl_(route.redirectTo);\n        remainUrl = initialUrl;\n        route = RouterService.routes.find(route => {\n            const match: RegExpMatchArray | null = initialUrl.match(route.matcher);\n            // console.log('match', match);\n            if (match !== null) {\n                extractedUrl = match[0];\n                remainUrl = initialUrl.substr(match[0].length, initialUrl.length);\n                return true;\n            } else {\n                return false;\n            }\n        });\n    }\n    if (route) {\n        // console.log('initialUrl', initialUrl);\n        // console.log('remainUrl', remainUrl);\n        const values: string[] = extractedUrl.split('/').filter(x => x !== '');\n        const params: RouterKeyValue = {};\n        route.segments.forEach((segment: RouteSegment, index: number) => {\n            const keys: string[] = Object.keys(segment.params);\n            if (keys.length) {\n                params[keys[0]] = values[index];\n            }\n        });\n        // console.log('Route.resolve', params);\n        // console.log('Route.resolve', extractedUrl.split('/').filter(x => x !== ''), route.segments.map(x => x.toString()).join('/'));\n        const routeSnapshot: RouteSnapshot = new RouteSnapshot({ ...route, initialUrl, urlAfterRedirects, extractedUrl, remainUrl, params });\n        if (remainUrl.length && this.children) {\n            routeSnapshot.childRoute = this.children.map(x => x.resolve(remainUrl)).find(x => x != null);\n        }\n        // console.log('RouteSnapshot', routeSnapshot.path, routeSnapshot.extractedUrl, routeSnapshot.remainUrl);\n        return routeSnapshot;\n    } else {\n        return undefined;\n    }\n}\n*/\n\n/*\nfunction serializeUrl_(routerLink: IRouterLink, currentRoute?: RouteSnapshot): string {\n    const segments: any[] = Array.isArray(routerLink) ? routerLink : [routerLink];\n    const isAbsolute: boolean = segments[0].indexOf('/') === 0;\n    if (!isAbsolute && currentRoute) {\n        segments.unshift(currentRoute.extractedUrl);\n        // console.log('currentRoute', currentRoute);\n    }\n    const url = segments.join('/');\n    // console.log(url, segments);\n    return url;\n}\n*/","import { RouterKeyValue } from '../router.types';\nimport { Route } from './route';\nimport { RouteSegment } from './route-segment';\n\nexport interface IRoutePath {\n    url?: string;\n    path?: string;\n    query?: string;\n    search?: any;\n    hash?: any;\n    params?: { [key: string]: any };\n    segments?: string[];\n}\n\nexport class RoutePath implements IRoutePath {\n    private url_!: string;\n    get url(): string {\n        return this.url_;\n    }\n    set url(url: string) {\n        // console.log(this.url_, url);\n        if (this.url_ !== url) {\n            this.url_ = url;\n            resolvePath_(url, this);\n        }\n    }\n    private routeSegments_!: RouteSegment[];\n    get routeSegments(): RouteSegment[] {\n        return this.routeSegments_;\n    }\n    set routeSegments(routeSegments: RouteSegment[]) {\n        if (this.routeSegments_ !== routeSegments) {\n            this.routeSegments_ = routeSegments;\n            this.params = resolveParams_(this.path, routeSegments);\n        }\n    }\n    get remainUrl(): string {\n        return this.query + this.hash;\n    }\n    path!: string;\n    query!: string;\n    params!: { [key: string]: any };\n    search!: string;\n    hash!: string;\n    segments!: string[];\n    route?: Route;\n    constructor(url: string = '', routeSegments: RouteSegment[] = [], snapshot?: Route) {\n        this.url = url;\n        this.routeSegments = routeSegments;\n        this.route = snapshot;\n    }\n    /*\n    toString(): string {\n        return this.url_;\n        // return `${encodeSegment_(this.path)}${encodeParams_(this.params)}`;\n    }\n    */\n}\n\nexport function resolvePath_(url: string, target: IRoutePath = {}): IRoutePath {\n    let path: string = '';\n    let query: string = '';\n    let hash: string = '';\n    const regExp: RegExp = /^([^\\?|\\#]*)?(\\?[^\\#]*)?(\\#[^\\#]*?)?$/gm;\n    const matches = url.matchAll(regExp);\n    for (let match of matches) {\n        const g1 = match[1];\n        const g2 = match[2];\n        const g3 = match[3];\n        if (g1) {\n            path = g1;\n        }\n        if (g2) {\n            query = g2;\n        }\n        if (g3) {\n            hash = g3;\n        }\n    }\n    target.path = path;\n    target.query = query;\n    target.hash = hash;\n    target.search = query.substring(1, query.length);\n    // let search: string = target.search = query.substring(1, query.length);\n    // const path: string = target.path = url.split('?')[0];\n    // const query: string = target.query = url.substring(path.length, url.length);\n    // const search: string = target.search = query.split('#')[0];\n    // const hash: string = target.hash = query.substring(search.length, query.length);\n    target.segments = path.split('/').filter(x => x !== '');\n    target.params = {};\n    // console.log('resolvePath_', url, path, query, search, hash, segments, params);\n    return target;\n}\n\nexport function resolveParams_(path: string, routeSegments: RouteSegment[]): { [key: string]: any } {\n    const segments: string[] = path.split('/').filter(x => x !== '');\n    const params: RouterKeyValue = {};\n    routeSegments.forEach((segment: RouteSegment, index: number) => {\n        // console.log('segment.params', segment.params);\n        const keys: string[] = Object.keys(segment.params);\n        if (keys.length) {\n            params[keys[0]] = decodeParams_(segments[index]);\n        }\n    });\n    return params;\n}\n\nexport function decodeParams_(encoded: string | null = null): any | null {\n    let decoded: any | null = encoded;\n    if (encoded) {\n        if (encoded.indexOf(';') === 0) {\n            try {\n                const json = window.atob(encoded.substring(1, encoded.length));\n                // const json = encoded;\n                decoded = JSON.parse(json);\n            } catch (error) {\n                // console.log('decodeParam_.error', error);\n                decoded = encoded;\n            }\n        } else if (Number(encoded).toString() === encoded) {\n            decoded = Number(encoded);\n        }\n    }\n    return decoded;\n}\n\nexport function encodeParams_(value: any): string | null {\n    let encoded: string | null = null;\n    try {\n        if (typeof value === 'object') {\n            const json = JSON.stringify(value);\n            encoded = ';' + window.btoa(json);\n            // encoded = json;\n        } else if (typeof value === 'number') {\n            encoded = value.toString();\n        }\n    } catch (error) {\n        console.log('encodeParam__.error', error);\n    }\n    return encoded;\n}\n\n/*\nexport function encodeParams_(params: RouterKeyValue): string {\n    // !!! array?\n    return Object.keys(params).map(key => `;${encodeSegment_(key)}=${typeof params[key] === 'string' ? encodeSegment_(params[key] as string) : encodeParams_(params[key] as RouterKeyValue)}`).join('');\n}\n\nexport function encodeSegment_(s: string): string {\n    return encodeString_(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function encodeString_(s: string): string {\n    return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n\nexport function decodeParams_(encodedParams: string): RouterKeyValue {\n    const params: RouterKeyValue = {} as RouterKeyValue;\n    const keyValues = encodedParams.split(';');\n    keyValues.forEach((x: string) => {\n        const kvs: string[] = x.split('=');\n        if (kvs.length === 2) {\n            params[kvs[0]] = kvs[1];\n        }\n    });\n    return params;\n}\n\nexport function resolvePath___(url: string, routeSegments: RouteSegment[]): { path: string, search: string, hash: string, segments: any[] } {\n    console.log('resolvePath_.resolvedRoute.routeSegments', routeSegments);\n    const path: string = url.split('?')[0];\n    const query: string = url.substring(path.length, url.length);\n    const search: string = query.split('#')[0];\n    const hash: string = query.substring(search.length, query.length);\n    const segments: string[] = path.split('/').filter(x => x !== '');\n    const params: RouterKeyValue = {};\n    routeSegments.forEach((segment: RouteSegment, index: number) => {\n        // console.log('segment.params', segment.params);\n        const keys: string[] = Object.keys(segment.params);\n        if (keys.length) {\n            params[keys[0]] = decodeParams_(segments[index]);\n        }\n    });\n    return { path, search, hash, segments };\n}\n*/","import { Component, Factory } from 'rxcomp';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { RouteComponent, RouterKeyValue } from '../router.types';\nimport { IBaseRoute, Route } from './route';\nimport { RouteSegment } from './route-segment';\n\nexport class RouteSnapshot implements IBaseRoute {\n    path!: string;\n    pathMatch: 'prefix' | 'full' = 'prefix';\n    component!: typeof Component; // import !!!\n    redirectTo?: string;\n    segments!: RouteSegment[];\n    relative: boolean = true;\n    children?: Route[];\n    childRoute?: RouteSnapshot;\n    parent?: RouteSnapshot | undefined;\n    initialUrl?: string;\n    urlAfterRedirects?: string;\n    extractedUrl?: string;\n    remainUrl?: string;\n    data!: RouterKeyValue;\n    params!: RouterKeyValue;\n    queryParams!: RouterKeyValue;\n    data$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    params$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    queryParams$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    canDeactivate: ((component: Factory, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canLoad: ((route: RouteSnapshot, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivate: ((route: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivateChild: ((childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    instance?: Component;\n    constructor(options?: IBaseRoute) {\n        if (options) {\n            Object.assign(this, options);\n        }\n        this.data$.next(this.data);\n        this.params$.next(this.params);\n        this.queryParams$.next(this.queryParams);\n    }\n    next(snapshot: RouteSnapshot): void {\n        this.childRoute = snapshot.childRoute;\n        if (snapshot.childRoute) {\n            snapshot.childRoute.parent = this;\n        }\n        const data = this.data = Object.assign({}, snapshot.data);\n        this.data$.next(data);\n        const params = this.params = Object.assign({}, snapshot.params);\n        this.params$.next(params);\n        const queryParams = this.queryParams = Object.assign({}, snapshot.queryParams);\n        this.queryParams$.next(queryParams);\n    }\n}","import { Route } from '../route/route';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport { RouteComponent, RouterLink } from '../router.types';\n\nexport interface IRouterEvent {\n    id?: number;\n    routerLink?: RouterLink;\n    url?: string; // The target URL passed into the `Router#navigateByUrl()` call before navigation. This is the value before the router has parsed or applied redirects to it.\n    initialUrl?: any; // string | UrlTree; // The initial target URL after being parsed with `UrlSerializer.extract()`.\n    urlAfterRedirects?: string;\n    extractedUrl?: any; // UrlTree; // The extracted URL after redirects have been applied.\n    remainUrl?: string;\n    finalUrl?: any; // UrlTree;\n    trigger?: 'imperative' | 'popstate' | 'hashchange';\n    extras?: any; // NavigationExtras;\n    previousNavigation?: IRouterEvent | null;\n    route?: Route | RouteSnapshot;\n    reason?: string;\n    redirectTo?: RouteComponent[];\n    error?: any;\n}\n\nexport class RouterEvent implements IRouterEvent {\n    url!: string;\n    routerLink!: RouterLink;\n    trigger!: 'imperative' | 'popstate' | 'hashchange';\n    constructor(options?: IRouterEvent) {\n        if (options) {\n            Object.assign(this, options);\n        }\n        if (this.routerLink) {\n            this.url = Array.isArray(this.routerLink) ? this.routerLink.join('') : this.routerLink;\n        }\n    }\n}\n\n// An event triggered when navigation starts.\nexport class NavigationStart extends RouterEvent {\n    navigationTrigger!: 'imperative' | 'popstate' | 'hashchange';\n    restoredState?: { [key: string]: any };\n}\n// An event triggered when the Router parses the URL and the routes are recognized.\nexport class RoutesRecognized extends RouterEvent {\n    route!: RouteSnapshot; // ???\n    // state!: RouterStateSnapshot;\n}\n\n// An event triggered at the start of the Guard phase of routing.\nexport class GuardsCheckStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the start of the child-activation part of the Resolve phase of routing.\nexport class ChildActivationStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the start of the activation part of the Resolve phase of routing.\nexport class ActivationStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the Guard phase of routing.\nexport class GuardsCheckEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the the start of the Resolve phase of routing.\nexport class ResolveStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the Resolve phase of routing.\nexport class ResolveEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the activation part of the Resolve phase of routing.\nexport class ActivationEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the child-activation part of the Resolve phase of routing.\nexport class ChildActivationEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n\n// An event triggered before the Router lazy loads a route configuration.\nexport class RouteConfigLoadStart extends RouterEvent {\n    route!: RouteSnapshot;\n    urlAfterRedirects!: string;\n}\n// An event triggered after a route has been lazy loaded.\nexport class RouteConfigLoadEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered when navigation ends successfully.\nexport class NavigationEnd extends RouterEvent {\n    urlAfterRedirects!: string;\n    route!: RouteSnapshot;\n}\n// An event triggered when navigation is canceled. This is due to a Route Guard returning false during navigation.\nexport class NavigationCancel extends RouterEvent {\n    reason!: string;\n    redirectTo?: RouteComponent[];\n}\n// An event triggered when navigation fails due to an unexpected error.\nexport class NavigationError extends RouterEvent {\n    error!: any;\n}\n\n/*\nNavigationStart {id: 1, url: '/test-a', navigationTrigger: 'imperative', restoredState: null, constructor: Object}\nRoutesRecognized {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nGuardsCheckStart {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nChildActivationStart {snapshot: ActivatedRouteSnapshot, constructor: Object}\nActivationStart {snapshot: ActivatedRouteSnapshot, constructor: Object}\nGuardsCheckEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, shouldActivate: true…}\nResolveStart {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nResolveEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nActivationEnd {snapshot: ActivatedRouteSnapshot, constructor: Object}\nChildActivationEnd {snapshot: ActivatedRouteSnapshot, constructor: Object}\nNavigationEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', constructor: Object}\nScroll {routerEvent: NavigationEnd, position: null, anchor: null, constructor: Object}\n*/","import { isPlatformBrowser } from 'rxcomp';\nimport { combineLatest, fromEvent, merge, Observable, of, ReplaySubject } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { INavigationExtras, IRoute, IRoutes, Route, Routes, serializeUrl_ } from '../route/route';\nimport { encodeParams_, RoutePath } from '../route/route-path';\nimport { RouteSegment } from '../route/route-segment';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport { RouteComponent, RouterKeyValue, RouterLink } from '../router.types';\nimport { ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, GuardsCheckEnd, GuardsCheckStart, IRouterEvent, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized } from './router-events';\n\nexport default class RouterService {\n    // static locationStrategy: any;\n    static get flatRoutes(): Routes {\n        return getFlatRoutes_(this.routes);\n    }\n    static routes: Routes = [];\n    static route$: ReplaySubject<RouteSnapshot> = new ReplaySubject<RouteSnapshot>(1);\n    static events$: ReplaySubject<RouterEvent> = new ReplaySubject<RouterEvent>(1);\n    static observe$: Observable<RouterEvent>;\n    static setRoutes(routes: IRoutes): RouterService {\n        this.routes = routes.map((x: IRoute) => new Route(x));\n        this.observe$ = makeObserve$_(this.routes, this.route$, this.events$);\n        return this;\n    }\n    static setRouterLink(routerLink: RouterLink, extras: INavigationExtras = { skipLocationChange: false }): void {\n        // ['/hero', hero.id];\n        this.events$.next(new NavigationStart({ routerLink, trigger: 'imperative' }));\n    }\n    static navigate(routerLink: RouterLink, extras: INavigationExtras = { skipLocationChange: false }): void {\n        // navigate(['items'], { relativeTo: this.route });\n        // navigate(['/heroes', { id: heroId }]);\n        this.events$.next(new NavigationStart({ routerLink, trigger: 'imperative' }));\n    }\n    static findRoute(routerLink: RouterLink): Route | null {\n        const initialUrl: string = serializeUrl_(routerLink);\n        return this.findRouteByUrl(initialUrl);\n    }\n    static findRouteByUrl(initialUrl: string): Route | null {\n        const routes: Routes = getFlatRoutes_(this.routes);\n        let resolvedRoute: Route | null = routes.find(route => initialUrl.match(route.matcher)) || null;\n        let urlAfterRedirects: string = initialUrl;\n        if (resolvedRoute && resolvedRoute.redirectTo) {\n            urlAfterRedirects = resolvedRoute.redirectTo;\n            resolvedRoute = this.findRouteByUrl(urlAfterRedirects);\n        }\n        return resolvedRoute;\n    }\n    static getPath(routerLink: RouterLink = []): RoutePath {\n        const lastPath: string = (Array.isArray(routerLink) ? routerLink : [routerLink]).map(x => {\n            return typeof x === 'string' ? x : encodeParams_(x);\n        }).join('/');\n        const segments: RouteSegment[] = [];\n        const routes: (Route | RouteSnapshot)[] = [];\n        const route: Route | null = RouterService.findRouteByUrl(lastPath);\n        if (route) {\n            let r: Route | RouteSnapshot | undefined | null = route?.parent;\n            while (r) {\n                segments.unshift.apply(segments, r.segments);\n                routes.unshift(r instanceof RouteSnapshot ? r : r.snapshot || r);\n                r = r.parent;\n            }\n            segments.push.apply(segments, route?.segments || []);\n            routes.push({ path: lastPath } as any);\n        }\n        const initialUrl: string = routes.map(r => r instanceof RouteSnapshot ? r.extractedUrl : r.path).join('/');\n        // console.log('RouterService.getPath', initialUrl, routes);\n        const routePath: RoutePath = new RoutePath(initialUrl, segments, route || undefined);\n        return routePath;\n    }\n}\nfunction setHistory_(url: string, params?: URLSearchParams, popped?: boolean): void {\n    if (isPlatformBrowser && window.history && window.history.pushState) {\n        const title = document.title;\n        url = `${url}${params ? '?' + params.toString() : ''}`;\n        // !!!\n        // const state = params ? params.toString() : '';\n        // console.log(state);\n        if (popped) {\n            window.history.replaceState(undefined, title, url);\n        } else {\n            window.history.pushState(undefined, title, url);\n        }\n    }\n}\nfunction getFlatRoutes_(routes: Routes): Routes {\n    const reduceRoutes: (routes: Route[]) => Route[] = (routes: Route[]): Route[] => {\n        return routes.reduce<Routes>((p: Route[], c: Route) => {\n            p.push(c);\n            p.push.apply(p, reduceRoutes(c.children || []));\n            return p;\n        }, []);\n    }\n    return reduceRoutes(routes);\n}\nfunction getFlatSnapshots_(currentSnapshot: RouteSnapshot): RouteSnapshot[] {\n    let snapshots: RouteSnapshot[] = [currentSnapshot];\n    let childRoute: RouteSnapshot | undefined = currentSnapshot.childRoute;\n    while (childRoute) {\n        snapshots.push(childRoute)\n        childRoute = childRoute.childRoute;\n    }\n    return snapshots;\n}\nfunction clearRoutes_(routes: Routes, currentSnapshot: RouteSnapshot): void {\n    let snapshots: RouteSnapshot[] = getFlatSnapshots_(currentSnapshot);\n    const flatRoutes: Routes = getFlatRoutes_(routes);\n    flatRoutes.forEach((route: Route) => {\n        if (route.snapshot && snapshots.indexOf(route.snapshot) === -1) {\n            route.snapshot = undefined;\n        }\n    });\n}\nfunction resolveRoutes_(routes: Routes, childRoutes: Routes, initialUrl: string): RouteSnapshot | undefined {\n    return childRoutes.reduce<RouteSnapshot | undefined>((p, route) => p || resolveRoute_(routes, route, initialUrl), undefined);\n}\nfunction resolveRoute_(routes: Routes, route: Route, initialUrl: string): RouteSnapshot | undefined {\n    let urlAfterRedirects!: string;\n    let extractedUrl: string = '';\n    let remainUrl: string = initialUrl;\n    const match: RegExpMatchArray | null = initialUrl.match(route.matcher);\n    if (match === null) {\n        return undefined;\n    }\n    if (route.redirectTo) {\n        return resolveRoute_(routes, route, route.redirectTo);\n    }\n    extractedUrl = match[0];\n    remainUrl = initialUrl.substring(match[0].length, initialUrl.length);\n    /*\n    while (route && route.redirectTo) {\n        urlAfterRedirects = route.redirectTo;\n        const routePath: RoutePath = RouterService.getPath(route?.redirectTo);\n        // const routePath: RoutePath = RoutePath.fromRouterLink(route?.redirectTo);\n        initialUrl = routePath.url;\n        remainUrl = initialUrl;\n        route = routes.find(r => {\n            const match: RegExpMatchArray | null = initialUrl.match(r.matcher);\n            // console.log('match', match);\n            if (match !== null) {\n                extractedUrl = match[0];\n                remainUrl = initialUrl.substr(match[0].length, initialUrl.length);\n                return true;\n            } else {\n                return false;\n            }\n        });\n    }\n    */\n    // console.log('initialUrl', initialUrl);\n    // console.log('remainUrl', remainUrl);\n    const routePath: RoutePath = new RoutePath(extractedUrl, route.segments);\n    let params: RouterKeyValue = routePath.params;\n    /*\n    console.log('route.segments', route.segments);\n    const values: string[] = extractedUrl.split('/').filter(x => x !== '');\n    const params: RouterKeyValue = {};\n    route.segments.forEach((segment: RouteSegment, index: number) => {\n        console.log('segment.params', segment.params);\n        const keys: string[] = Object.keys(segment.params);\n        if (keys.length) {\n            params[keys[0]] = decodeParams__(values[index]);\n        }\n    });\n    */\n    // console.log('Route.resolve', params);\n    // console.log('Route.resolve', extractedUrl.split('/').filter(x => x !== ''), route.segments.map(x => x.toString()).join('/'));\n    const snapshot: RouteSnapshot = new RouteSnapshot({ ...route, initialUrl, urlAfterRedirects, extractedUrl, remainUrl, params });\n    route.snapshot = snapshot;\n    // console.log('route.snapshot', route.path, snapshot.extractedUrl);\n    if (route.children?.length && remainUrl.length) {\n        const childRoute: RouteSnapshot | undefined = resolveRoutes_(routes, route.children, remainUrl);\n        snapshot.childRoute = childRoute;\n        if (childRoute) {\n            childRoute.parent = snapshot;\n        }\n        // console.log('childRoute', childRoute);\n    }\n    // console.log('RouteSnapshot', snapshot.path, snapshot.extractedUrl, snapshot.remainUrl);\n    return snapshot;\n}\nfunction makeActivatorResponse$_(event: RouterEvent, activators: Observable<boolean | RouteComponent[]>[]): Observable<RouterEvent> {\n    // console.log('makeActivatorResponse$_', event);\n    return combineLatest(...activators).pipe(\n        map((values: (boolean | RouteComponent[])[]) => {\n            const canActivate: boolean | RouteComponent[] = values.reduce<boolean | RouteComponent[]>((p: boolean | RouteComponent[], c: boolean | RouteComponent[]) => {\n                return p === true ? (c === true ? true : c) : p;\n            }, true);\n            if (canActivate === true) {\n                return event;\n            } else {\n                const cancelEvent: IRouterEvent = { ...event, reason: 'An activation guard has dismissed navigation to the route.' };\n                if (canActivate !== false) {\n                    cancelEvent.redirectTo = canActivate;\n                }\n                return new NavigationCancel(cancelEvent);\n            }\n        })\n    );\n}\nfunction makeCanDeactivateResponse$_(events$: ReplaySubject<RouterEvent>, event: GuardsCheckStart, currentRoute?: RouteSnapshot): Observable<RouterEvent> {\n    // console.log('makeCanDeactivateResponse$_', event);\n    if (event.route.canDeactivate && event.route.canDeactivate.length && currentRoute?.instance) {\n        const route: RouteSnapshot = event.route;\n        return makeActivatorResponse$_(event, route.canDeactivate.map(x => x(currentRoute.instance!, currentRoute)));\n    } else {\n        return of(event);\n    }\n}\nfunction makeCanLoadResponse$_(events$: ReplaySubject<RouterEvent>, event: GuardsCheckStart): Observable<RouterEvent> {\n    // console.log('makeCanLoadResponse$_', event);\n    if (event.route.canLoad && event.route.canLoad.length) {\n        const route: RouteSnapshot = event.route;\n        return makeActivatorResponse$_(event, route.canLoad.map(x => x(route, route.segments)));\n    } else {\n        return of(event);\n    }\n}\nfunction makeCanActivateChildResponse$_(events$: ReplaySubject<RouterEvent>, event: GuardsCheckStart): Observable<RouterEvent> {\n    // console.log('makeCanActivateChildResponse$_', event, event.route.childRoute);\n    const reduceChildRouteActivators_ = (route: RouteSnapshot, activators: Observable<boolean | RouteComponent[]>[]): Observable<boolean | RouteComponent[]>[] => {\n        // console.log('reduceChildRouteActivators_', route.canActivateChild, route.childRoute);\n        while (route != null && route.canActivateChild && route.canActivateChild.length && route.childRoute) {\n            const routeActivators: Observable<boolean | RouteComponent[]>[] = route.canActivateChild.map(x => x(route.childRoute!));\n            Array.prototype.push.apply(activators, routeActivators);\n            route = route.childRoute;\n        }\n        return activators;\n    }\n    const activators: Observable<boolean | RouteComponent[]>[] = reduceChildRouteActivators_(event.route, []);\n    // console.log('makeCanActivateChildResponse$_', activators);\n    if (activators.length) {\n        return makeActivatorResponse$_(event, activators);\n    } else {\n        return of(event);\n    }\n}\nfunction makeCanActivateResponse$_(events$: ReplaySubject<RouterEvent>, event: ChildActivationStart): Observable<RouterEvent> {\n    // console.log('makeCanActivateResponse$_', event);\n    if (event.route.canActivate && event.route.canActivate.length) {\n        const route: RouteSnapshot = event.route;\n        return makeActivatorResponse$_(event, route.canActivate.map(x => x(route)));\n    } else {\n        return of(event);\n    }\n}\nfunction makeObserve$_(routes: Routes, route$: ReplaySubject<RouteSnapshot>, events$: ReplaySubject<RouterEvent>): Observable<RouterEvent> {\n    let currentRoute: RouteSnapshot | undefined;\n    const stateEvents$ = merge(fromEvent<PopStateEvent>(window, 'popstate')).pipe(\n        tap((event: PopStateEvent) => {\n            console.log('location', document.location.pathname, 'state', event.state);\n        }),\n        map(event => new NavigationStart({ routerLink: document.location.pathname, trigger: 'popstate' })),\n        shareReplay(1),\n    );\n    return merge(stateEvents$, events$).pipe(\n        switchMap((event: RouterEvent) => {\n            if (event instanceof GuardsCheckStart) {\n                return makeCanDeactivateResponse$_(events$, event, currentRoute).pipe(\n                    switchMap((nextEvent: RouterEvent) => {\n                        if (nextEvent instanceof NavigationCancel) {\n                            return of(nextEvent);\n                        } else {\n                            return makeCanLoadResponse$_(events$, event).pipe(\n                                switchMap((nextEvent: RouterEvent) => {\n                                    if (nextEvent instanceof NavigationCancel) {\n                                        return of(nextEvent);\n                                    } else {\n                                        return makeCanActivateChildResponse$_(events$, event);\n                                    }\n                                }),\n                            );\n                        }\n                    }),\n                );\n            } else if (event instanceof ChildActivationStart) {\n                return makeCanActivateResponse$_(events$, event);\n            } else {\n                return of(event);\n            }\n        }),\n        tap((event: RouterEvent) => {\n            if (event instanceof NavigationStart) {\n                // console.log('NavigationStart', event.routerLink);\n                const routerLink = event.routerLink;\n                // console.log('routerLink', routerLink);\n                let snapshot: RouteSnapshot | undefined;\n                let initialUrl: string;\n                const routePath: RoutePath = RouterService.getPath(routerLink);\n                // const routePath: RoutePath = RoutePath.fromRouterLink(routerLink);\n                // console.log(routePath, routePath.url);\n                initialUrl = routePath.url;\n                // console.log('initialUrl', initialUrl);\n                const isRelative: boolean = initialUrl.indexOf('/') !== 0;\n                if (isRelative && currentRoute && currentRoute.children?.length) {\n                    snapshot = resolveRoutes_(routes, currentRoute.children, initialUrl);\n                    if (snapshot) {\n                        currentRoute.childRoute = snapshot;\n                        snapshot.parent = currentRoute;\n                        snapshot = currentRoute;\n                    }\n                    // console.log('relative', currentRoute, snapshot, initialUrl);\n                } else {\n                    snapshot = resolveRoutes_(routes, routes, initialUrl);\n                    // console.log('absolute');\n                }\n                if (snapshot) {\n                    // console.log(routes);\n                    currentRoute = snapshot;\n                    events$.next(new RoutesRecognized({ ...event, route: snapshot }));\n                } else {\n                    events$.next(new NavigationError({ ...event, error: new Error('unknown route') }));\n                }\n            } else if (event instanceof RoutesRecognized) {\n                // console.log('RoutesRecognized', event);\n                events$.next(new GuardsCheckStart({ ...event }));\n            } else if (event instanceof GuardsCheckStart) {\n                // console.log('GuardsCheckStart', event);\n                events$.next(new ChildActivationStart({ ...event }));\n            } else if (event instanceof ChildActivationStart) {\n                // console.log('ChildActivationStart', event);\n                events$.next(new ActivationStart({ ...event }));\n            } else if (event instanceof ActivationStart) {\n                // console.log('ActivationStart', event);\n                events$.next(new GuardsCheckEnd({ ...event }));\n            } else if (event instanceof GuardsCheckEnd) {\n                // console.log('GuardsCheckEnd', event);\n                events$.next(new ResolveStart({ ...event }));\n            } else if (event instanceof ResolveStart) {\n                // console.log('ResolveStart', event);\n                events$.next(new ResolveEnd({ ...event }));\n            } else if (event instanceof ResolveEnd) {\n                // console.log('ResolveEnd', event);\n                events$.next(new ActivationEnd({ ...event }));\n            } else if (event instanceof ActivationEnd) {\n                // console.log('ActivationEnd', event);\n                events$.next(new ChildActivationEnd({ ...event }));\n            } else if (event instanceof ChildActivationEnd) {\n                // console.log('ChildActivationEnd', event);\n                events$.next(new RouteConfigLoadStart({ ...event }));\n\n            } else if (event instanceof RouteConfigLoadStart) {\n                // console.log('RouteConfigLoadStart', event);\n                events$.next(new RouteConfigLoadEnd({ ...event }));\n            } else if (event instanceof RouteConfigLoadEnd) {\n                // console.log('RouteConfigLoadEnd', event);\n                events$.next(new NavigationEnd({ ...event }));\n            } else if (event instanceof NavigationEnd) {\n                const segments: string[] = [];\n                let source: RouteSnapshot | undefined = event.route;\n                while (source != null) {\n                    // console.log(source.params, source.data);\n                    if (source.extractedUrl?.length) {\n                        segments.push(source.extractedUrl);\n                    }\n                    if (source.childRoute) {\n                        source = source.childRoute;\n                    } else {\n                        if (source.remainUrl?.length) {\n                            segments[segments.length - 1] = segments[segments.length - 1] + source.remainUrl;\n                        }\n                        source = undefined;\n                    }\n                }\n                const extractedUrl: string = segments.join('/').replace(/\\/\\//g, '/');\n                console.log('NavigationEnd', event);\n                clearRoutes_(routes, event.route);\n                setHistory_(extractedUrl, undefined, event.trigger === 'popstate');\n                route$.next(event.route);\n            } else if (event instanceof NavigationCancel) {\n                console.log('NavigationCancel', event);\n                if (event.redirectTo) {\n                    events$.next(new NavigationStart({ routerLink: event.redirectTo, trigger: 'imperative' }));\n                }\n            } else if (event instanceof NavigationError) {\n                console.log('NavigationError', event);\n            }\n        }),\n        catchError((error: Error) => of(new NavigationError({ ...event, error }))),\n        shareReplay(1),\n    );\n}\n\n/*\nprivate static makeObserve$_____remove_(): Observable<RouterEvent> {\n    let currentRoute: RouteSnapshot | undefined;\n    const stateEvents$ = merge(fromEvent<PopStateEvent>(window, 'popstate')).pipe(\n        tap((event: PopStateEvent) => {\n            console.log('location', document.location.pathname, 'state', event.state);\n        }),\n        map(event => new NavigationStart({ routerLink: document.location.pathname, trigger: 'popstate' })),\n        shareReplay(1),\n    );\n    return merge(stateEvents$, RouterService.events$).pipe(\n        switchMap((event: RouterEvent) => {\n            if (event instanceof GuardsCheckStart && event.route.canActivate && event.route.canActivate.length) {\n                return combineLatest(...event.route.canActivate).pipe(\n                    map((values: boolean[]) => {\n                        const canActivate: boolean = values.reduce<boolean>((p: boolean, c: boolean) => {\n                            return p && c;\n                        }, true);\n                        if (canActivate) {\n                            return event;\n                        } else {\n                            return new NavigationCancel({ ...event, reason: 'Activation guard has dismissed navigation to route.' })\n                        }\n                    })\n                );\n            } else {\n                return of(event);\n            }\n        }),\n        tap((event: RouterEvent) => {\n            if (event instanceof NavigationStart) {\n                console.log('NavigationStart', event.routerLink);\n                const routerLink = event.routerLink;\n                // console.log('routerLink', routerLink);\n                let snapshot: RouteSnapshot | undefined;\n                const initialUrl: string = serializeUrl_(routerLink);\n                const isRelative: boolean = initialUrl.indexOf('/') !== 0;\n                if (isRelative && currentRoute && currentRoute.children?.length) {\n                    snapshot = currentRoute.children.reduce<RouteSnapshot | undefined>((p, r) => p || r.resolve(initialUrl), undefined);\n                    if (snapshot) {\n                        currentRoute.childRoute = snapshot;\n                        snapshot.parent = currentRoute;\n                        snapshot = currentRoute;\n                    }\n                    // console.log('relative', currentRoute, snapshot, initialUrl);\n                } else {\n                    snapshot = RouterService.routes.reduce<RouteSnapshot | undefined>((p, r) => p || r.resolve(initialUrl), undefined);\n                    // console.log('absolute');\n                }\n                if (snapshot != null) {\n                    currentRoute = snapshot;\n                    RouterService.events$.next(new RoutesRecognized({ ...event, route: snapshot }));\n                } else {\n                    RouterService.events$.next(new NavigationError({ ...event, error: new Error('unknown route') }));\n                }\n            } else if (event instanceof RoutesRecognized) {\n                // console.log('RoutesRecognized', event);\n                RouterService.events$.next(new GuardsCheckStart({ ...event }));\n            } else if (event instanceof GuardsCheckStart) {\n                RouterService.events$.next(new ChildActivationStart({ ...event }));\n            } else if (event instanceof ChildActivationStart) {\n                RouterService.events$.next(new ActivationStart({ ...event }));\n            } else if (event instanceof ActivationStart) {\n                RouterService.events$.next(new GuardsCheckEnd({ ...event }));\n            } else if (event instanceof GuardsCheckEnd) {\n                RouterService.events$.next(new ResolveStart({ ...event }));\n            } else if (event instanceof ResolveStart) {\n                RouterService.events$.next(new ResolveEnd({ ...event }));\n            } else if (event instanceof ResolveEnd) {\n                RouterService.events$.next(new ActivationEnd({ ...event }));\n            } else if (event instanceof ActivationEnd) {\n                RouterService.events$.next(new ChildActivationEnd({ ...event }));\n            } else if (event instanceof ChildActivationEnd) {\n                RouterService.events$.next(new RouteConfigLoadStart({ ...event }));\n\n            } else if (event instanceof RouteConfigLoadStart) {\n                // console.log('RouteConfigLoadStart', event);\n                RouterService.events$.next(new RouteConfigLoadEnd({ ...event }));\n            } else if (event instanceof RouteConfigLoadEnd) {\n                // console.log('RouteConfigLoadEnd', event);\n                RouterService.events$.next(new NavigationEnd({ ...event }));\n            } else if (event instanceof NavigationEnd) {\n                const segments: string[] = [];\n                let source: RouteSnapshot | undefined = event.route;\n                while (source != null) {\n                    console.log(source.params, source.data);\n                    if (source.extractedUrl?.length) {\n                        segments.push(source.extractedUrl);\n                    }\n                    if (source.childRoute) {\n                        source = source.childRoute;\n                    } else {\n                        if (source.remainUrl?.length) {\n                            segments[segments.length - 1] = segments[segments.length - 1] + source.remainUrl;\n                        }\n                        source = undefined;\n                    }\n                }\n                const extractedUrl: string = segments.join('/').replace(/\\/\\//g, '/');\n                console.log('NavigationEnd', extractedUrl);\n                setHistory_(extractedUrl, undefined, event.trigger === 'popstate');\n                RouterService.route$.next(event.route);\n            } else if (event instanceof NavigationCancel) {\n                console.log('NavigationCancel', event);\n            } else if (event instanceof NavigationError) {\n                console.log('NavigationError', event);\n            }\n        }),\n        shareReplay(1),\n    );\n}\n*/\n/*\nreturn Observable.create(function (observer: Observer<RouterEvent>) {\n    // observer.next(new RouterEvent());\n    // observer.complete();\n    // observer.error(new RouterErrorEvent());\n});\n*/","import { Directive, getContext, IFactoryMeta } from 'rxcomp';\nimport { fromEvent, Observable } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { INavigationExtras } from '../route/route';\nimport { RoutePath } from '../route/route-path';\nimport { RouteSegment } from '../route/route-segment';\nimport { RouteComponent, RouterLink } from '../router.types';\nimport RouterService from './router.service';\n\nexport default class RouterLinkDirective extends Directive {\n\n    segments!: RouteSegment[];\n    private routerLink_!: RouteComponent[];\n    get routerLink(): RouterLink {\n        return this.routerLink_;\n    }\n    set routerLink(routerLink: RouterLink) {\n        this.routerLink_ = Array.isArray(routerLink) ? routerLink : [routerLink];\n        this.segments = this.getSegments(this.routerLink_);\n    }\n\n    getSegments(routerLink: RouteComponent[]): RouteSegment[] {\n        // console.log('RouterLinkDirective.getSegments', routerLink);\n        const segments: RouteSegment[] = [];\n        routerLink.forEach(item => {\n            if (typeof item === 'string') {\n                const regExp: RegExp = /([^:]+)|\\:([^\\/]+)/g;\n                const matches = item.matchAll(regExp);\n                const components = [];\n                for (let match of matches) {\n                    const g1 = match[1];\n                    const g2 = match[2];\n                    if (g1) {\n                        components.push(g1);\n                    } else if (g2) {\n                        const param: { [key: string]: any } = {};\n                        param[g2] = null;\n                        components.push(param);\n                    }\n                }\n            } else {\n                segments.push(new RouteSegment('', {}));\n            }\n        });\n        return segments;\n    }\n\n    /*\n    get urlTree(): UrlTree {\n        return RouterService.createUrlTree(this.routerLink, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: this.preserve,\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: this.preserveFragment,\n        });\n    }\n    */\n\n    onInit() {\n        const { node } = getContext(this);\n        const event$: Observable<Event> = fromEvent<Event>(node, 'click').pipe(shareReplay(1));\n        event$.pipe(\n            takeUntil(this.unsubscribe$)\n        ).subscribe(event => {\n            // console.log('RouterLinkDirective', event, this.routerLink);\n            // !!! skipLocationChange\n            const navigationExtras: INavigationExtras = {\n                skipLocationChange: this.skipLocationChange,\n                replaceUrl: this.replaceUrl,\n                state: this.state,\n            };\n            RouterService.setRouterLink(this.routerLink, navigationExtras);\n            event.preventDefault();\n            return false;\n        });\n    }\n\n    onChanges() {\n        const { node } = getContext(this);\n        const routePath: RoutePath = RouterService.getPath(this.routerLink_);\n        node.setAttribute('href', routePath.url);\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[routerLink],[[routerLink]]',\n        inputs: ['routerLink'],\n    };\n}\n","import { Directive, getContext, IFactoryMeta } from 'rxcomp';\nimport { RoutePath } from '../route/route-path';\nimport RouterLinkDirective from './router-link.directive';\nimport RouterService from './router.service';\n\nexport default class RouterLinkActiveDirective extends Directive {\n    routerLinkActive!: { [key: string]: string } | string;\n    keys: string[] = [];\n    onChanges() {\n        // console.log('RouterLinkActive.onChanges');\n        const { node } = getContext(this);\n        node.classList.remove.apply(node.classList, this.keys);\n        let keys: string[] = [];\n        const active = this.isActive();\n        if (active) {\n            const object = this.routerLinkActive;\n            if (typeof object === 'object') {\n                for (let key in object) {\n                    if (object[key]) {\n                        keys.push(key);\n                    }\n                }\n            } else if (typeof object === 'string') {\n                keys = object.split(' ').filter(x => x.length);\n                /*\n                const regExp: RegExp = /([^\\s]+)/g;\n                const matches = object.matchAll(regExp);\n                for (let match in matches) {\n                    console.log('match', match);\n                    keys.push(match[1]);\n                }\n                */\n            }\n        }\n        node.classList.add.apply(node.classList, keys);\n        this.keys = keys;\n        // console.log('RouterLinkActive.onChanges', active, keys);\n    }\n    isActive(): boolean {\n        const path: RoutePath = RouterService.getPath(this.host.routerLink);\n        const isActive: boolean = path.route?.snapshot != null;\n        // console.log('RouterLinkActive.isActive', isActive);\n        return isActive;\n    }\n    static meta: IFactoryMeta = {\n        selector: '[routerLinkActive],[[routerLinkActive]]',\n        hosts: { host: RouterLinkDirective },\n        inputs: ['routerLinkActive'],\n    };\n}\n","import { Component, Factory, getContext, IComment, IElement, IFactoryMeta, Structure } from 'rxcomp';\nimport { isObservable, Observable, Observer, of, ReplaySubject, Subscription } from 'rxjs';\nimport { filter, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport View from '../core/view';\nimport { isPromise } from '../route/route-activators';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport RouterService from './router.service';\n\nexport default class RouterOutletStructure extends Structure {\n    private route$_: ReplaySubject<RouteSnapshot | undefined> = new ReplaySubject<RouteSnapshot | undefined>(1);\n    private route_?: RouteSnapshot;\n    private factory_?: typeof Component;\n\n    get route(): RouteSnapshot | undefined {\n        return this.route_;\n    }\n    set route(route: RouteSnapshot | undefined) {\n        if (this.route_ && route && this.route_.component === route.component) {\n            this.route_.next(route);\n        } else {\n            this.route_ = route;\n            if (route) {\n                this.factory = route.component;\n                route.instance = this.instance;\n            } else {\n                this.factory = undefined;\n            }\n        }\n    }\n    get factory(): typeof Component | undefined {\n        return this.factory_;\n    }\n    set factory(factory: typeof Component | undefined) {\n        const { module, node } = getContext(this);\n        // console.log('set factory', factory);\n        if (this.factory_ !== factory) {\n            this.factory_ = factory;\n            if (this.element) {\n                if (this.instance && this.instance instanceof View) {\n                    asObservable_([this.element], this.instance.onExit);\n                }\n                this.element.parentNode!.removeChild(this.element);\n                module.remove(this.element, this);\n                this.element = undefined;\n                this.instance = undefined;\n            }\n            if (factory && factory.meta.template) {\n                let element: IElement = document.createElement('div');\n                element.innerHTML = factory.meta.template;\n                if (element.children.length === 1) {\n                    element = element.firstElementChild as IElement;\n                }\n                node.appendChild(element);\n                const instance: Factory | undefined = module.makeInstance(element, factory, factory.meta.selector!, this);\n                module.compile(element, instance);\n                this.instance = instance;\n                this.element = element;\n                /*\n                if (instance) {\n                    // const forItemContext = getContext(instance);\n                    // console.log('ForStructure', clonedNode, forItemContext.instance.constructor.name);\n                    // module.compile(clonedNode, forItemContext.instance);\n                    // node.appendChild(element);\n                    // nextSibling = clonedNode.nextSibling;\n                    // this.instance = instance;\n                    // this.element = element;\n                    // this.outlet.parentNode?.insertBefore(element, this.outlet);\n                }\n                */\n            }\n        }\n    }\n\n    host?: RouterOutletStructure;\n    outlet!: IComment;\n    element?: IElement;\n    instance?: Component;\n\n    onInit() {\n        this.route$().pipe(\n            switchMap(snapshot => this.factory$(snapshot)),\n            takeUntil(this.unsubscribe$)\n        ).subscribe(() => {\n            // console.log(`RouterOutletStructure ActivatedRoutes: [\"${RouterService.flatRoutes.filter(x => x.snapshot).map(x => x.snapshot?.extractedUrl).join('\", \"')}\"]`);\n        });\n        if (this.host) {\n            this.route$_.next(this.host.route?.childRoute);\n        }\n        /*\n        if (this.host) {\n            this.route = this.host.route?.childRoute;\n            // console.log('RouterOutletStructure.onInit*', this.route?.extractedUrl, this.route?.factory);\n        } else {\n            RouterService.route$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe(route => {\n                // console.log('RouterOutletStructure.onInit*', route.extractedUrl, route.component);\n                this.route = route;\n                console.log(`RouterOutletStructure ActivatedRoutes: [\"${RouterService.flatRoutes.filter(x => x.snapshot).map(x => x.snapshot?.extractedUrl).join('\", \"')}\"]`);\n                // !!! pushChanges is called in RouterModule module on NavigationEnd !!!;\n                // this.pushChanges();\n            });\n        }\n        */\n        /*\n        const { node } = getContext(this);\n        const outlet: IComment = this.outlet = document.createComment(`outlet`);\n        outlet.rxcompId = node.rxcompId;\n        node.parentNode!.replaceChild(outlet, node);\n        */\n    }\n\n    onChanges() {\n        if (this.host) {\n            this.route$_.next(this.host.route?.childRoute);\n        }\n        /*\n        if (this.host) {\n            this.route = this.host.route?.childRoute;\n            // console.log('RouterOutletStructure.onChanges', this.route?.component);\n        }\n        */\n    }\n\n    route$(): Observable<RouteSnapshot | undefined> {\n        const source: Observable<RouteSnapshot | undefined> = this.host ? this.route$_ : RouterService.route$;\n        return source.pipe(\n            filter((snapshot: RouteSnapshot | undefined) => {\n                this.route_ = snapshot; // !!!\n                if (this.snapshot_ && snapshot && this.snapshot_.component === snapshot.component) {\n                    this.snapshot_.next(snapshot);\n                    return false;\n                } else {\n                    this.snapshot_ = snapshot;\n                    return true;\n                }\n            }),\n        );\n    }\n\n    factory$(snapshot: RouteSnapshot | undefined): Observable<boolean> {\n        const { module, node } = getContext(this);\n        const factory: typeof Component | undefined = snapshot?.component;\n        if (this.factory_ !== factory) {\n            this.factory_ = factory;\n            return this.onExit$_(this.element, this.instance).pipe(\n                tap(() => {\n                    if (this.element) {\n                        this.element.parentNode!.removeChild(this.element);\n                        module.remove(this.element, this);\n                        this.element = undefined;\n                        this.instance = undefined;\n                    }\n                }),\n                switchMap(() => {\n                    if (snapshot && factory && factory.meta.template) {\n                        let element: IElement = document.createElement('div');\n                        element.innerHTML = factory.meta.template;\n                        if (element.children.length === 1) {\n                            element = element.firstElementChild as IElement;\n                        }\n                        node.appendChild(element);\n                        const instance: Factory | undefined = module.makeInstance(element, factory, factory.meta.selector!, this);\n                        module.compile(element, instance);\n                        this.instance = instance;\n                        this.element = element;\n                        snapshot.instance = instance;\n                        return this.onEnter$_(element, instance);\n                        /*\n                        if (instance) {\n                            // const forItemContext = getContext(instance);\n                            // console.log('ForStructure', clonedNode, forItemContext.instance.constructor.name);\n                            // module.compile(clonedNode, forItemContext.instance);\n                            // node.appendChild(element);\n                            // nextSibling = clonedNode.nextSibling;\n                            // this.instance = instance;\n                            // this.element = element;\n                            // this.outlet.parentNode?.insertBefore(element, this.outlet);\n                        }\n                        */\n                    } else {\n                        return of(false);\n                    }\n                })\n            );\n        } else {\n            return of(false);\n        }\n    }\n\n    private onEnter$_(element?: IElement, instance?: Component): Observable<boolean> {\n        if (element && instance && instance instanceof View) {\n            return asObservable_([element], instance.onEnter);\n        } else {\n            return of(true);\n        }\n    }\n    private onExit$_(element?: IElement, instance?: Component): Observable<boolean> {\n        if (element && instance && instance instanceof View) {\n            return asObservable_([element], instance.onExit);\n        } else {\n            return of(true);\n        }\n    }\n\n    static meta: IFactoryMeta = {\n        selector: 'router-outlet,[router-outlet]',\n        hosts: { host: RouterOutletStructure },\n    };\n}\n\nfunction asObservable_<T>(args: any[], callback: (...args: any[]) => Observable<T> | Promise<T> | (() => T) | T): Observable<T> {\n    return Observable.create(function (observer: Observer<T>) {\n        let subscription: Subscription;\n        try {\n            let result: Observable<T> | Promise<T> | (() => T) | T = callback(...args);\n            if (isObservable(result)) {\n                subscription = result.subscribe(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (isPromise<T>(result)) {\n                (result as Promise<T>).then(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (typeof result === 'function') {\n                observer.next((result as (() => T))() as T);\n                observer.complete();\n            } else {\n                observer.next(result);\n                observer.complete();\n            }\n        } catch (error) {\n            observer.error(error);\n        }\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n    });\n}","import { Factory, IModuleMeta, Module, Pipe } from 'rxcomp';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { IRoute } from './route/route';\nimport { NavigationCancel, NavigationEnd, NavigationError, RouterEvent } from './router/router-events';\nimport RouterLinkActiveDirective from './router/router-link-active.directive';\nimport RouterLinkDirective from './router/router-link.directive';\nimport RouterOutletStructure from './router/router-outlet.structure';\nimport RouterService from './router/router.service';\n\nconst factories: typeof Factory[] = [\n\tRouterOutletStructure,\n\tRouterLinkDirective,\n\tRouterLinkActiveDirective,\n];\n\nconst pipes: typeof Pipe[] = [\n];\n\n/**\n *  RouterModule Class.\n * @example\n * export default class AppModule extends Module {}\n *\n * AppModule.meta = {\n *  imports: [\n *   CoreModule,\n *    RouterModule\n *  ],\n *  declarations: [\n *   ErrorsComponent\n *  ],\n *  bootstrap: AppComponent,\n * };\n * @extends Module\n */\nexport default class RouterModule extends Module {\n\tconstructor() {\n\t\tsuper();\n\t\t// console.log('RouterModule');\n\t\tRouterService.observe$.pipe(\n\t\t\ttap((event: RouterEvent) => {\n\t\t\t\tif (event instanceof NavigationEnd\n\t\t\t\t\t|| event instanceof NavigationCancel\n\t\t\t\t\t|| event instanceof NavigationError) {\n\t\t\t\t\tif (this.instances?.length) {\n\t\t\t\t\t\tconst root = this.instances[0];\n\t\t\t\t\t\troot.pushChanges();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttakeUntil(this.unsubscribe$),\n\t\t).subscribe();\n\t\tRouterService.navigate(window.location.pathname + window.location.search + window.location.hash);\n\t}\n\n\tstatic meta: IModuleMeta = {\n\t\tdeclarations: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t],\n\t\texports: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t]\n\t};\n\n\tstatic forRoot(routes: IRoute[]): typeof RouterModule {\n\t\tRouterService.setRoutes(routes);\n\t\treturn RouterModule;\n\t}\n}\n","import { Observable, Observer } from 'rxjs';\n\nexport function transition$(callback: (complete: (result: boolean) => void) => void, delay = 350) {\n    return Observable.create(function (observer: Observer<boolean>) {\n        // let subscription: Subscription;\n        try {\n            callback((result: boolean) => {\n                // setTimeout(() => {\n                observer.next(result);\n                observer.complete();\n                // }, delay);\n            });\n        } catch (error) {\n            observer.error(error);\n        }\n        /*\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n        */\n    });\n}","import { Component, errors$, getContext, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\n\nexport default class AppComponent extends Component {\n\terror: any = null;\n\n\tonInit() {\n\t\t// console.log('AppComponent.onInit', this);\n\t\tconst { node } = getContext(this);\n\t\tnode.classList.add('init');\n\t\terrors$.pipe(\n\t\t\ttakeUntil(this.unsubscribe$),\n\t\t).subscribe(error => {\n\t\t\tthis.error = error;\n\t\t\tthis.pushChanges();\n\t\t});\n\t}\n\n\tstatic meta: IFactoryMeta = {\n\t\tselector: '[app-component]',\n\t};\n}\n","import { Component } from 'rxcomp';\nimport { ICanActivate, ICanActivateChild, ICanDeactivate, ICanLoad, RouterActivatorResult, RouteSegment, RouteSnapshot } from '../../../../src/rxcomp-router';\n\nexport class CustomActivator implements ICanActivate, ICanDeactivate<Component>, ICanActivateChild, ICanLoad {\n    canDeactivate<T>(component: T, currentRoute: RouteSnapshot): RouterActivatorResult {\n        // console.log('canDeactivate', component, currentRoute);\n        return true;\n    }\n    canLoad(route: RouteSnapshot, segments: RouteSegment[]): RouterActivatorResult {\n        // console.log('canLoad', route, segments);\n        return true;\n    }\n    canActivate(route: RouteSnapshot): RouterActivatorResult {\n        // console.log('canActivate', route);\n        return ['/dashboard'];\n    }\n    canActivateChild(childRoute: RouteSnapshot): RouterActivatorResult {\n        // console.log('canActivateChild', childRoute);\n        return childRoute.path === 'media' ? ['files'] : true;\n    }\n}\n\nexport const customActivator: CustomActivator = new CustomActivator();\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class ContactsComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            route.data$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((data: RouterKeyValue) => {\n                this.title = data.title;\n                // this.pushChanges(); // !!not needed;\n                // console.log('ContactsComponent', data);\n            });\n        }\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[contacts-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-contacts\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { combineLatest } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class DataComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            combineLatest(route.data$, route.params$).pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((datas: RouterKeyValue[]) => {\n                this.title = datas[0].title;\n                this.params = datas[1];\n                // this.pushChanges(); // !!not needed;\n                // console.log('DataComponent', datas);\n            });\n        }\n        /*\n        this.host.route?.data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n        this.host.route?.params$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((params) => this.params = params);\n        */\n    }\n    static meta: IFactoryMeta = {\n        selector: '[data-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-data\">\n            <div class=\"title\">{{title}}</div>\n            <div class=\"params\">{{params | json}}</div>\n        </div>\n        `,\n    };\n}\n","import 'gsap';\nimport { IElement, IFactoryMeta } from 'rxcomp';\nimport { combineLatest } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure, transition$, View } from '../../../../src/rxcomp-router';\nexport default class DetailComponent extends View {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            combineLatest(route.data$, route.params$).pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((datas: RouterKeyValue[]) => {\n                this.title = datas[0].title;\n                this.detailId = datas[1].detailId;\n                // this.pushChanges(); // !!not needed;\n                // console.log('DetailComponent', datas);\n            });\n        }\n        /*\n        (this.host.route as RouteSnapshot).data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n        (this.host.route as RouteSnapshot).params$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((params) => this.detailId = params.detailId);\n        */\n    }\n    onEnter(node: IElement) {\n        return transition$(complete => {\n            gsap.set(node, { opacity: 0 });\n            gsap.to(node, {\n                opacity: 1,\n                duration: 1,\n                ease: Power3.easeInOut,\n                onComplete: () => {\n                    complete(true);\n                }\n            });\n        });\n    }\n    onExit(node: IElement) {\n        return transition$(complete => {\n            gsap.set(node, { opacity: 1 });\n            gsap.to(node, {\n                opacity: 0,\n                duration: 1,\n                ease: Power3.easeInOut,\n                onComplete: () => {\n                    complete(true);\n                }\n            });\n        });\n    }\n    static meta: IFactoryMeta = {\n        selector: '[detail-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-detail\">\n            <div class=\"title\">Detail {{detailId}}</div>\n            <ul class=\"nav--menu\">\n                <li><a routerLink=\"media\" routerLinkActive=\"active\">Media</a></li>\n                <li><a routerLink=\"files\" routerLinkActive=\"active\">Files</a></li>\n            </ul>\n            <router-outlet></router-outlet>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class IndexComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            route.data$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((data: RouterKeyValue) => {\n                this.title = data.title;\n                // this.pushChanges(); // !!not needed;\n                // console.log('IndexComponent', data);\n            });\n        }\n    }\n    static meta: IFactoryMeta = {\n        selector: '[index-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-index\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class NotFoundComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        // console.log('NotFoundComponent.onInit');\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[not-found-component]',\n        template: /* html */`\n        <div class=\"page-not-found\">\n            <div class=\"title\">Not Found</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class SubComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            route.data$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((data: RouterKeyValue) => {\n                this.title = data.title;\n                // this.pushChanges(); // !!not needed;\n                // console.log('SubComponent', data);\n            });\n        }\n    }\n    static meta: IFactoryMeta = {\n        selector: '[sub-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-sub\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { CoreModule, IModuleMeta, Module } from 'rxcomp';\nimport { RouterModule } from '../../../src/rxcomp-router';\nimport AppComponent from './app.component';\nimport { customActivator } from './custom-activator/custom-activator';\nimport ContactsComponent from './pages/contacts.component';\nimport DataComponent from './pages/data.component';\nimport DetailComponent from './pages/detail.component';\nimport IndexComponent from './pages/index.component';\nimport NotFoundComponent from './pages/not-found.component';\nimport SubComponent from './pages/sub.component';\n\nexport default class AppModule extends Module {\n\tstatic meta: IModuleMeta = {\n\t\timports: [\n\t\t\tCoreModule,\n\t\t\tRouterModule.forRoot([\n\t\t\t\t{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\t\t\t\t{ path: 'dashboard', component: IndexComponent, data: { title: 'Dashboard' } },\n\t\t\t\t{\n\t\t\t\t\tpath: 'detail/:detailId', component: DetailComponent, data: { title: 'Detail' },\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{ path: 'media', component: SubComponent, data: { title: 'Media' } },\n\t\t\t\t\t\t{ path: 'files', component: SubComponent, data: { title: 'Files' } }\n\t\t\t\t\t],\n\t\t\t\t\tcanActivateChild: [customActivator],\n\t\t\t\t},\n\t\t\t\t{ path: 'data/:data', component: DataComponent, data: { title: 'Data' } },\n\t\t\t\t{ path: 'contacts', component: ContactsComponent, data: { title: 'Contacts' }, canActivate: [customActivator] },\n\t\t\t\t{ path: '**', component: NotFoundComponent },\n\t\t\t]),\n\t\t],\n\t\tdeclarations: [\n\t\t\tIndexComponent,\n\t\t\tDataComponent,\n\t\t\tDetailComponent,\n\t\t\tContactsComponent,\n\t\t],\n\t\tbootstrap: AppComponent,\n\t};\n\n}\n","import { Browser } from 'rxcomp';\nimport AppModule from './app.module';\n\nBrowser.bootstrap(AppModule);\n"]}