{"version":3,"sources":["www/browser/src/main.browser.ts","../../src/route/route-activators.ts","../../src/route/route-segment.ts","../../src/route/route.ts","../../src/route/route-snapshot.ts","../../src/router/router-events.ts","../../src/router/router.service.ts","../../src/router/router-link.directive.ts","../../src/router/router-outlet.structure.ts","../../src/router.module.ts","../../www/browser/src/app.component.ts","../../www/browser/src/pages/contacts.component.ts","../../www/browser/src/pages/detail.component.ts","../../www/browser/src/pages/index.component.ts","../../www/browser/src/pages/not-found.component.ts","../../www/browser/src/pages/sub.component.ts","../../www/browser/src/app.module.ts","../../www/browser/src/main.browser.ts"],"names":["rxcomp","operators","rxjs","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_defineProperty","obj","value","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","toString","call","slice","name","from","test","_unsupportedIterableToArray","done","TypeError","next","bind","makeObserver$_","callback","Observable","observer","subscription","result","isObservable","subscribe","complete","Promise","then","error","Error","unsubscribe","RouteSegment","path","params","this","encodeSegment_","map","join","s","encodeURIComponent","replace","encodeString_","Route","options","pathMatch","relative","canDeactivate","canLoad","canActivate","canActivateChild","assign","x","activator","component","currentRoute","route","segments","childRoute","children","matcher","RegExp","_step","matchers","_iterator","matchAll","match","g1","g2","g3","param","regexp","serializeUrl_","routerLink","RouteSnapshot","data$","ReplaySubject","params$","queryParams$","data","queryParams","routeSnapshot","RouterEvent","url","NavigationStart","_RouterEvent","RoutesRecognized","_RouterEvent2","GuardsCheckStart","_RouterEvent3","ChildActivationStart","_RouterEvent4","ActivationStart","_RouterEvent5","GuardsCheckEnd","_RouterEvent6","ResolveStart","_RouterEvent7","ResolveEnd","_RouterEvent8","ActivationEnd","_RouterEvent9","ChildActivationEnd","_RouterEvent10","RouteConfigLoadStart","_RouterEvent11","RouteConfigLoadEnd","_RouterEvent12","NavigationEnd","_RouterEvent13","NavigationCancel","_RouterEvent14","NavigationError","_RouterEvent15","RouterService","setRoutes","routes","observe$","route$","events$","stateEvents$","merge","fromEvent","window","pipe","tap","event","console","log","document","location","pathname","state","trigger","shareReplay","switchMap","combineLatest","values","reduce","p","c","reason","of","_currentRoute$childre","initialUrl","indexOf","r","resolveRoute_","undefined","_source$extractedUrl","_source$remainUrl","extractedUrl","remainUrl","popped","isPlatformBrowser","history","pushState","title","replaceState","setHistory_","makeObserve$_","setRouterLink","extras","navigate","urlAfterRedirects","resolvedRoute","substring","redirectTo","find","substr","split","segment","index","RouterLinkDirective","_Directive","_proto","getSegments","item","components","onInit","_this","node","getContext","takeUntil","unsubscribe$","navigationExtras","skipLocationChange","replaceUrl","preventDefault","onChanges","setAttribute","get","routerLink_","set","Directive","selector","inputs","RouterOutletStructure","_Structure","host","pushChanges","route_","component_","_getContext","module","element","parentNode","removeChild","remove","instance","meta","template","createElement","innerHTML","firstElementChild","appendChild","makeInstance","compile","Structure","hosts","factories","pipes","RouterModule","_Module","search","hash","forRoot","Module","declarations","concat","exports","AppComponent","_Component","_this2","classList","add","errors$","Component","ContactsComponent","DetailComponent","detailId","IndexComponent","NotFoundComponent","SubComponent","CustomActivator","AppModule","imports","CoreModule","bootstrap","Browser"],"mappings":"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","file":"docs/js/main.min.js","sourcesContent":[null,"import { isObservable, Observable, Observer, Subscription } from 'rxjs';\nimport { RouteComponent, RouterActivatorResult } from '../router.types';\nimport { Route } from './route';\nimport { RouteSegment } from './route-segment';\nimport { RouteSnapshot } from './route-snapshot';\n\nexport interface ICanDeactivate<T> {\n    canDeactivate(component: T, currentRoute: RouteSnapshot): RouterActivatorResult\n}\n\nexport interface ICanLoad {\n    canLoad(route: Route, segments: RouteSegment[]): RouterActivatorResult\n}\n\nexport interface ICanActivate {\n    canActivate(route: RouteSnapshot): RouterActivatorResult\n}\n\nexport interface ICanActivateChild {\n    canActivateChild(childRoute: RouteSnapshot): RouterActivatorResult\n}\n\nexport function mapCanDeactivate$_<T>(activator: ICanDeactivate<T>): (component: T, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canDeactivate$(component: T, currentRoute: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canDeactivate(component, currentRoute));\n    };\n}\nexport function mapCanLoad$_(activator: ICanLoad): (route: Route, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]> {\n    return function canLoad$$(route: Route, segments: RouteSegment[]): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canLoad(route, segments));\n    };\n}\nexport function mapCanActivate$_(activator: ICanActivate): (route: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canActivate$(route: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canActivate(route));\n    };\n}\nexport function mapCanActivateChild$_(activator: ICanActivateChild): (childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canActivateChild$(childRoute: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canActivateChild(childRoute));\n    };\n}\nexport function isPromise<T>(object: any): object is Promise<T> {\n    return object instanceof Promise || (typeof object === 'object' && 'then' in object && typeof object['then'] === 'function');\n}\n\nfunction makeObserver$_(callback: () => RouterActivatorResult) {\n    return Observable.create(function (observer: Observer<boolean | RouteComponent[]>) {\n        let subscription: Subscription;\n        try {\n            let result: RouterActivatorResult = callback();\n            if (isObservable(result)) {\n                subscription = result.subscribe(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (isPromise<boolean | RouteComponent[]>(result)) {\n                (result as Promise<boolean | RouteComponent[]>).then(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (typeof result === 'boolean' || Array.isArray(result)) {\n                observer.next(result);\n                observer.complete();\n            } else {\n                observer.error(new Error('invalid value'));\n            }\n        } catch (error) {\n            observer.error(error);\n        }\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n    });\n}\n\n","import { RouterKeyValue } from '../router.types';\n\nexport class RouteSegment {\n    path: string;\n    params: any;\n    constructor(path: string, params: RouterKeyValue = {}) {\n        this.path = path;\n        this.params = params;\n    }\n    toString(): string {\n        return `${encodeSegment_(this.path)}${encodeParams_(this.params)}`;\n    }\n}\n\nexport function encodeParams_(params: RouterKeyValue): string {\n    return Object.keys(params).map(key => `;${encodeSegment_(key)}=${encodeSegment_(params[key])}`).join('');\n}\n\nexport function encodeSegment_(s: string): string {\n    return encodeString_(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function encodeString_(s: string): string {\n    return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n","import { Component, Factory } from 'rxcomp';\nimport { Observable } from 'rxjs';\nimport { Data, RouteComponent, RouterKeyValue, RouterLink } from '../router.types';\nimport { ICanActivate, ICanActivateChild, ICanDeactivate, ICanLoad, mapCanActivate$_, mapCanActivateChild$_, mapCanDeactivate$_, mapCanLoad$_ } from './route-activators';\nimport { RouteSegment } from './route-segment';\nimport { RouteSnapshot } from './route-snapshot';\n\nexport type IRoutes = IRoute[];\nexport type Routes = Route[];\n\nexport interface INavigationExtras {\n    relativeTo?: RouteSnapshot | null;\n    queryParams?: RouterKeyValue; // Params | null;\n    fragment?: string;\n    preserveQueryParams?: boolean;\n    queryParamsHandling?: any; // QueryParamsHandling | null;\n    preserveFragment?: boolean;\n    skipLocationChange?: boolean;\n    replaceUrl?: boolean;\n    state?: { [key: string]: any };\n}\n\nexport interface IBaseRoute {\n    path?: string;\n    pathMatch?: 'prefix' | 'full';\n    component?: typeof Component;\n    // matcher?: UrlMatcher;\n    matcher?: RegExp;\n    redirectTo?: string;\n    outlet?: string;\n    children?: IRoutes | Routes;\n    // children?: IRoute[];\n    initialUrl?: string;\n    urlAfterRedirects?: string;\n    extractedUrl?: string;\n    remainUrl?: string;\n    // resolve?: ResolveData;\n    // loadChildren?: LoadChildren;\n    // runGuardsAndResolvers?: RunGuardsAndResolvers;\n    data?: Data;\n    params?: RouterKeyValue;\n    queryParams?: RouterKeyValue;\n}\n\nexport interface IRoute extends IBaseRoute {\n    canActivate?: ICanActivate[];\n    canActivateChild?: ICanActivateChild[];\n    canDeactivate?: ICanDeactivate<Component>[];\n    canLoad?: ICanLoad[];\n}\n\nexport class Route implements IBaseRoute {\n    path!: string;\n    pathMatch: 'prefix' | 'full' = 'prefix';\n    component!: typeof Component; // import !!!\n    matcher: RegExp;\n    redirectTo?: string;\n    segments: RouteSegment[];\n    relative: boolean = true;\n    children?: Routes;\n    canDeactivate: ((component: Factory, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canLoad: ((route: Route, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivate: ((route: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivateChild: ((childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    constructor(options?: IRoute) {\n        if (options) {\n            Object.assign(this, options);\n            this.canDeactivate = options.canDeactivate ? options.canDeactivate.map(x => mapCanDeactivate$_<Component>(x)) : [];\n            this.canLoad = options.canLoad ? options.canLoad.map(x => mapCanLoad$_(x)) : [];\n            this.canActivate = options.canActivate ? options.canActivate.map(x => mapCanActivate$_(x)) : [];\n            this.canActivateChild = options.canActivateChild ? options.canActivateChild.map(x => mapCanActivateChild$_(x)) : [];\n        }\n        if (this.children) {\n            this.children = this.children.map((route: IBaseRoute) => {\n                return new Route(route);\n            });\n        }\n        const segments: RouteSegment[] = [];\n        if (this.path === '**') {\n            segments.push(new RouteSegment(this.path));\n            this.matcher = new RegExp('^.*$');\n        } else {\n            const matchers: string[] = ['^(^\\.\\.\\/|\\.\\/|\\/\\/|\\/)?'];\n            const regExp: RegExp = /(^\\.\\.\\/|\\.\\/|\\/\\/|\\/)|([^:|\\/]+)\\/?|\\:([^\\/]+)\\/?/g;\n            const matches = this.path.matchAll(regExp);\n            for (let match of matches) {\n                const g1 = match[1];\n                const g2 = match[2];\n                const g3 = match[3];\n                if (g1) {\n                    this.relative = !(g1 === '//' || g1 === '/');\n                } else if (g2) {\n                    matchers.push(g2);\n                    segments.push(new RouteSegment(g2));\n                } else if (g3) {\n                    matchers.push('(\\/[^\\/]+)');\n                    const param: { [key: string]: any } = {};\n                    param[g3] = null;\n                    segments.push(new RouteSegment('', param));\n                }\n            }\n            if (this.pathMatch === 'full') {\n                matchers.push('$');\n            }\n            const regexp: string = matchers.join('');\n            this.matcher = new RegExp(regexp);\n        }\n        this.segments = segments;\n    }\n}\n\nexport function serializeUrl_(routerLink: RouterLink): string {\n    const segments: any[] = Array.isArray(routerLink) ? routerLink : [routerLink];\n    return segments.join('/');\n}\n\n/*\nfunction isCanActivate(object: any): object is ICanActivate {\n    return 'canActivate' in object;\n}\nfunction isCanActivateChild(object: any): object is ICanActivate {\n    return 'canActivateChild' in object;\n}\nfunction isCanDeactivate(object: any): object is ICanActivate {\n    return 'canDeactivate' in object;\n}\nfunction isCanLoad(object: any): object is ICanActivate {\n    return 'canLoad' in object;\n}\n\nfunction mapActivators__(options: IRoute, key: 'canActivate' | 'canActivateChild' | 'canDeactivate' | 'canLoad'): Observable<boolean | RouteComponent[]>[] {\n    const activators: ICanActivate[] | ICanActivateChild[] | ICanDeactivate<Component>[] | ICanLoad[] | undefined = options[key];\n    if (activators) {\n        return activators.map<Observable<boolean | RouteComponent[]>>((activator: ICanActivate | ICanActivateChild | ICanDeactivate<Component> | ICanLoad) => {\n            return Observable.create(function (observer: Observer<boolean | RouteComponent[]>) {\n                try {\n                    let result: boolean | RouteComponent[] = false;\n                    if (isCanActivate(activator)) {\n                        result = activator.canActivate(route);\n                    }\n                    observer.next(result);\n                    observer.complete();\n                } catch (error) {\n                    observer.error(error);\n                }\n            });\n            if (isObservable(x)) {\n                return x;\n            } else if (typeof x === 'function') {\n                return Observable.create((function (observer: Observer<boolean>) {\n                    try {\n                        const result: boolean = x();\n                        observer.next(result);\n                        observer.complete();\n                    } catch (error) {\n                        observer.error(error);\n                    }\n                }))\n            } else if (typeof x === 'boolean') {\n                return of(x);\n            }\n        });\n    } else {\n        return [];\n    }\n}\n\nfunction mapActivators_(activators?: RouterActivator[]): Observable<boolean | RouteComponent[]>[] {\n    if (activators) {\n        return activators.map<Observable<boolean>>((x: RouterActivator) => {\n            if (isObservable(x)) {\n                return x;\n            } else if (typeof x === 'function') {\n                return Observable.create((function (observer: Observer<boolean>) {\n                    try {\n                        const result: boolean = x();\n                        observer.next(result);\n                        observer.complete();\n                    } catch (error) {\n                        observer.error(error);\n                    }\n                }))\n            } else if (typeof x === 'boolean') {\n                return of(x);\n            }\n        });\n    } else {\n        return [];\n    }\n}\n*/\n\n/*\nresolve(initialUrl: string): RouteSnapshot | undefined {\n    let urlAfterRedirects!: string;\n    let extractedUrl: string = '';\n    let remainUrl: string = initialUrl;\n    let route: Route | undefined;\n    const match: RegExpMatchArray | null = initialUrl.match(this.matcher);\n    // console.log('match', initialUrl, match, this.matcher);\n    if (match !== null) {\n        extractedUrl = match[0];\n        remainUrl = initialUrl.substring(match[0].length, initialUrl.length);\n        route = this;\n    }\n    while (route && route.redirectTo) {\n        urlAfterRedirects = route.redirectTo;\n        initialUrl = serializeUrl_(route.redirectTo);\n        remainUrl = initialUrl;\n        route = RouterService.routes.find(route => {\n            const match: RegExpMatchArray | null = initialUrl.match(route.matcher);\n            // console.log('match', match);\n            if (match !== null) {\n                extractedUrl = match[0];\n                remainUrl = initialUrl.substr(match[0].length, initialUrl.length);\n                return true;\n            } else {\n                return false;\n            }\n        });\n    }\n    if (route) {\n        // console.log('initialUrl', initialUrl);\n        // console.log('remainUrl', remainUrl);\n        const values: string[] = extractedUrl.split('/').filter(x => x !== '');\n        const params: RouterKeyValue = {};\n        route.segments.forEach((segment: RouteSegment, index: number) => {\n            const keys: string[] = Object.keys(segment.params);\n            if (keys.length) {\n                params[keys[0]] = values[index];\n            }\n        });\n        // console.log('Route.resolve', params);\n        // console.log('Route.resolve', extractedUrl.split('/').filter(x => x !== ''), route.segments.map(x => x.toString()).join('/'));\n        const routeSnapshot: RouteSnapshot = new RouteSnapshot({ ...route, initialUrl, urlAfterRedirects, extractedUrl, remainUrl, params });\n        if (remainUrl.length && this.children) {\n            routeSnapshot.childRoute = this.children.map(x => x.resolve(remainUrl)).find(x => x != null);\n        }\n        // console.log('RouteSnapshot', routeSnapshot.path, routeSnapshot.extractedUrl, routeSnapshot.remainUrl);\n        return routeSnapshot;\n    } else {\n        return undefined;\n    }\n}\n*/\n\n/*\nfunction serializeUrl_(routerLink: IRouterLink, currentRoute?: RouteSnapshot): string {\n    const segments: any[] = Array.isArray(routerLink) ? routerLink : [routerLink];\n    const isAbsolute: boolean = segments[0].indexOf('/') === 0;\n    if (!isAbsolute && currentRoute) {\n        segments.unshift(currentRoute.extractedUrl);\n        // console.log('currentRoute', currentRoute);\n    }\n    const url = segments.join('/');\n    // console.log(url, segments);\n    return url;\n}\n*/","import { Component, Factory } from 'rxcomp';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { RouteComponent, RouterKeyValue } from '../router.types';\nimport { IBaseRoute, Route } from './route';\nimport { RouteSegment } from './route-segment';\n\nexport class RouteSnapshot implements IBaseRoute {\n    path!: string;\n    pathMatch: 'prefix' | 'full' = 'prefix';\n    component!: typeof Component; // import !!!\n    redirectTo?: string;\n    segments!: RouteSegment[];\n    relative: boolean = true;\n    children?: Route[];\n    childRoute?: RouteSnapshot;\n    parent?: RouteSnapshot | undefined;\n    initialUrl?: string;\n    urlAfterRedirects?: string;\n    extractedUrl?: string;\n    remainUrl?: string;\n    data!: RouterKeyValue;\n    params!: RouterKeyValue;\n    queryParams!: RouterKeyValue;\n    data$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    params$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    queryParams$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    canDeactivate: ((component: Factory, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canLoad: ((route: Route, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivate: ((route: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivateChild: ((childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    constructor(options?: IBaseRoute) {\n        if (options) {\n            Object.assign(this, options);\n        }\n        this.data$.next(this.data);\n        this.params$.next(this.params);\n        this.queryParams$.next(this.queryParams);\n        /*\n        if (this.children) {\n            this.children = this.children.map((route: IRoute) => {\n                return new RouteSnapshot(route);\n            });\n        }\n        */\n    }\n    next(routeSnapshot: RouteSnapshot): void {\n        const data = this.data = Object.assign({}, routeSnapshot.data);\n        this.data$.next(data);\n        const params = this.params = Object.assign({}, routeSnapshot.params);\n        this.params$.next(params);\n        const queryParams = this.queryParams = Object.assign({}, routeSnapshot.queryParams);\n        this.queryParams$.next(queryParams);\n    }\n}","import { Route } from '../route/route';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport { RouterLink } from '../router.types';\n\nexport interface IRouterEvent {\n    id?: number;\n    routerLink?: RouterLink;\n    url?: string; // The target URL passed into the `Router#navigateByUrl()` call before navigation. This is the value before the router has parsed or applied redirects to it.\n    initialUrl?: any; // string | UrlTree; // The initial target URL after being parsed with `UrlSerializer.extract()`.\n    urlAfterRedirects?: string;\n    extractedUrl?: any; // UrlTree; // The extracted URL after redirects have been applied.\n    remainUrl?: string;\n    finalUrl?: any; // UrlTree;\n    trigger?: 'imperative' | 'popstate' | 'hashchange';\n    extras?: any; // NavigationExtras;\n    previousNavigation?: IRouterEvent | null;\n    route?: Route | RouteSnapshot;\n    reason?: string;\n    error?: any;\n}\n\nexport class RouterEvent implements IRouterEvent {\n    url!: string;\n    routerLink!: RouterLink;\n    trigger!: 'imperative' | 'popstate' | 'hashchange';\n    constructor(options?: IRouterEvent) {\n        if (options) {\n            Object.assign(this, options);\n        }\n        if (this.routerLink) {\n            this.url = Array.isArray(this.routerLink) ? this.routerLink.join('') : this.routerLink;\n        }\n    }\n}\n\n// An event triggered when navigation starts.\nexport class NavigationStart extends RouterEvent {\n    navigationTrigger!: 'imperative' | 'popstate' | 'hashchange';\n    restoredState?: { [key: string]: any };\n}\n// An event triggered when the Router parses the URL and the routes are recognized.\nexport class RoutesRecognized extends RouterEvent {\n    route!: RouteSnapshot; // ???\n    // state!: RouterStateSnapshot;\n}\n\n// An event triggered at the start of the Guard phase of routing.\nexport class GuardsCheckStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the start of the child-activation part of the Resolve phase of routing.\nexport class ChildActivationStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the start of the activation part of the Resolve phase of routing.\nexport class ActivationStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the Guard phase of routing.\nexport class GuardsCheckEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the the start of the Resolve phase of routing.\nexport class ResolveStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the Resolve phase of routing.\nexport class ResolveEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the activation part of the Resolve phase of routing.\nexport class ActivationEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the child-activation part of the Resolve phase of routing.\nexport class ChildActivationEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n\n// An event triggered before the Router lazy loads a route configuration.\nexport class RouteConfigLoadStart extends RouterEvent {\n    route!: RouteSnapshot;\n    urlAfterRedirects!: string;\n}\n// An event triggered after a route has been lazy loaded.\nexport class RouteConfigLoadEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered when navigation ends successfully.\nexport class NavigationEnd extends RouterEvent {\n    urlAfterRedirects!: string;\n    route!: RouteSnapshot;\n}\n// An event triggered when navigation is canceled. This is due to a Route Guard returning false during navigation.\nexport class NavigationCancel extends RouterEvent {\n    reason!: string;\n}\n// An event triggered when navigation fails due to an unexpected error.\nexport class NavigationError extends RouterEvent {\n    error!: any;\n}\n\n/*\nNavigationStart {id: 1, url: '/test-a', navigationTrigger: 'imperative', restoredState: null, constructor: Object}\nRoutesRecognized {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nGuardsCheckStart {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nChildActivationStart {snapshot: ActivatedRouteSnapshot, constructor: Object}\nActivationStart {snapshot: ActivatedRouteSnapshot, constructor: Object}\nGuardsCheckEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, shouldActivate: true…}\nResolveStart {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nResolveEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nActivationEnd {snapshot: ActivatedRouteSnapshot, constructor: Object}\nChildActivationEnd {snapshot: ActivatedRouteSnapshot, constructor: Object}\nNavigationEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', constructor: Object}\nScroll {routerEvent: NavigationEnd, position: null, anchor: null, constructor: Object}\n*/","import { isPlatformBrowser } from 'rxcomp';\nimport { combineLatest, fromEvent, merge, Observable, of, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { INavigationExtras, IRoute, Route, Routes, serializeUrl_ } from '../route/route';\nimport { RouteSegment } from '../route/route-segment';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport { RouterKeyValue, RouterLink } from '../router.types';\nimport { ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized } from './router-events';\n\nexport default class RouterService {\n    // static locationStrategy: any;\n    static routes: Routes = [];\n    static route$: ReplaySubject<RouteSnapshot> = new ReplaySubject<RouteSnapshot>(1);\n    static events$: ReplaySubject<RouterEvent> = new ReplaySubject<RouterEvent>(1);\n    static observe$: Observable<RouterEvent>;\n    static setRoutes(routes: Routes): RouterService {\n        this.routes = routes.map(x => new Route(x as unknown as IRoute));\n        this.observe$ = makeObserve$_(this.routes, this.route$, this.events$);\n        return this;\n    }\n    static setRouterLink(routerLink: RouterLink, extras: INavigationExtras = { skipLocationChange: false }): void {\n        // ['/hero', hero.id];\n        this.events$.next(new NavigationStart({ routerLink, trigger: 'imperative' }));\n    }\n    static navigate(routerLink: RouterLink, extras: INavigationExtras = { skipLocationChange: false }): void {\n        // navigate(['items'], { relativeTo: this.route });\n        // navigate(['/heroes', { id: heroId }]);\n        this.events$.next(new NavigationStart({ routerLink, trigger: 'imperative' }));\n    }\n}\n\nfunction setHistory_(url: string, params?: URLSearchParams, popped?: boolean): void {\n    if (isPlatformBrowser && window.history && window.history.pushState) {\n        const title = document.title;\n        url = `${url}${params ? '?' + params.toString() : ''}`;\n        // !!!\n        // const state = params ? params.toString() : '';\n        // console.log(state);\n        if (popped) {\n            window.history.replaceState(undefined, title, url);\n        } else {\n            window.history.pushState(undefined, title, url);\n        }\n    }\n}\n\nfunction resolveRoute_(routes: Routes, route: Route, initialUrl: string): RouteSnapshot | undefined {\n    let urlAfterRedirects!: string;\n    let extractedUrl: string = '';\n    let remainUrl: string = initialUrl;\n    let resolvedRoute: Route | undefined;\n    const match: RegExpMatchArray | null = initialUrl.match(route.matcher);\n    // console.log('match', initialUrl, match, route.matcher);\n    if (match !== null) {\n        extractedUrl = match[0];\n        remainUrl = initialUrl.substring(match[0].length, initialUrl.length);\n        resolvedRoute = route;\n    }\n    while (resolvedRoute && resolvedRoute.redirectTo) {\n        urlAfterRedirects = resolvedRoute.redirectTo;\n        initialUrl = serializeUrl_(resolvedRoute.redirectTo);\n        remainUrl = initialUrl;\n        resolvedRoute = routes.find(r => {\n            const match: RegExpMatchArray | null = initialUrl.match(r.matcher);\n            // console.log('match', match);\n            if (match !== null) {\n                extractedUrl = match[0];\n                remainUrl = initialUrl.substr(match[0].length, initialUrl.length);\n                return true;\n            } else {\n                return false;\n            }\n        });\n    }\n    if (resolvedRoute) {\n        // console.log('initialUrl', initialUrl);\n        // console.log('remainUrl', remainUrl);\n        const values: string[] = extractedUrl.split('/').filter(x => x !== '');\n        const params: RouterKeyValue = {};\n        resolvedRoute.segments.forEach((segment: RouteSegment, index: number) => {\n            const keys: string[] = Object.keys(segment.params);\n            if (keys.length) {\n                params[keys[0]] = values[index];\n            }\n        });\n        // console.log('Route.resolve', params);\n        // console.log('Route.resolve', extractedUrl.split('/').filter(x => x !== ''), resolvedRoute.segments.map(x => x.toString()).join('/'));\n        const routeSnapshot: RouteSnapshot = new RouteSnapshot({ ...resolvedRoute, initialUrl, urlAfterRedirects, extractedUrl, remainUrl, params });\n        if (remainUrl.length && route.children) {\n            routeSnapshot.childRoute = route.children.map(x => resolveRoute_(routes, x, remainUrl)).find(x => x != null);\n        }\n        // console.log('RouteSnapshot', routeSnapshot.path, routeSnapshot.extractedUrl, routeSnapshot.remainUrl);\n        return routeSnapshot;\n    } else {\n        return undefined;\n    }\n}\n\nfunction makeObserve$_(routes: Routes, route$: ReplaySubject<RouteSnapshot>, events$: ReplaySubject<RouterEvent>): Observable<RouterEvent> {\n    let currentRoute: RouteSnapshot | undefined;\n    const stateEvents$ = merge(fromEvent<PopStateEvent>(window, 'popstate')).pipe(\n        tap((event: PopStateEvent) => {\n            console.log('location', document.location.pathname, 'state', event.state);\n        }),\n        map(event => new NavigationStart({ routerLink: document.location.pathname, trigger: 'popstate' })),\n        shareReplay(1),\n    );\n    return merge(stateEvents$, events$).pipe(\n        switchMap((event: RouterEvent) => {\n            if (event instanceof GuardsCheckStart && event.route.canActivate && event.route.canActivate.length) {\n                return combineLatest(...event.route.canActivate.map(x => x(event.route))).pipe(\n                    map((values: boolean[]) => {\n                        const canActivate: boolean = values.reduce<boolean>((p: boolean, c: boolean) => {\n                            return p && c;\n                        }, true);\n                        if (canActivate) {\n                            return event;\n                        } else {\n                            return new NavigationCancel({ ...event, reason: 'Activation guard has dismissed navigation to route.' })\n                        }\n                    })\n                );\n            } else {\n                return of(event);\n            }\n        }),\n        tap((event: RouterEvent) => {\n            if (event instanceof NavigationStart) {\n                console.log('NavigationStart', event.routerLink);\n                const routerLink = event.routerLink;\n                // console.log('routerLink', routerLink);\n                let routeSnapshot: RouteSnapshot | undefined;\n                const initialUrl: string = serializeUrl_(routerLink);\n                const isRelative: boolean = initialUrl.indexOf('/') !== 0;\n                if (isRelative && currentRoute && currentRoute.children?.length) {\n                    routeSnapshot = currentRoute.children.reduce<RouteSnapshot | undefined>((p, r) => p || resolveRoute_(routes, r, initialUrl), undefined);\n                    if (routeSnapshot) {\n                        currentRoute.childRoute = routeSnapshot;\n                        routeSnapshot = currentRoute;\n                    }\n                    // console.log('relative', currentRoute, routeSnapshot, initialUrl);\n                } else {\n                    routeSnapshot = routes.reduce<RouteSnapshot | undefined>((p, r) => p || resolveRoute_(routes, r, initialUrl), undefined);\n                    // console.log('absolute');\n                }\n                if (routeSnapshot != null) {\n                    currentRoute = routeSnapshot;\n                    events$.next(new RoutesRecognized({ ...event, route: routeSnapshot }));\n                } else {\n                    events$.next(new NavigationError({ ...event, error: new Error('unknown route') }));\n                }\n            } else if (event instanceof RoutesRecognized) {\n                // console.log('RoutesRecognized', event);\n                events$.next(new GuardsCheckStart({ ...event }));\n            } else if (event instanceof GuardsCheckStart) {\n                events$.next(new ChildActivationStart({ ...event }));\n            } else if (event instanceof ChildActivationStart) {\n                events$.next(new ActivationStart({ ...event }));\n            } else if (event instanceof ActivationStart) {\n                events$.next(new GuardsCheckEnd({ ...event }));\n            } else if (event instanceof GuardsCheckEnd) {\n                events$.next(new ResolveStart({ ...event }));\n            } else if (event instanceof ResolveStart) {\n                events$.next(new ResolveEnd({ ...event }));\n            } else if (event instanceof ResolveEnd) {\n                events$.next(new ActivationEnd({ ...event }));\n            } else if (event instanceof ActivationEnd) {\n                events$.next(new ChildActivationEnd({ ...event }));\n            } else if (event instanceof ChildActivationEnd) {\n                events$.next(new RouteConfigLoadStart({ ...event }));\n\n            } else if (event instanceof RouteConfigLoadStart) {\n                // console.log('RouteConfigLoadStart', event);\n                events$.next(new RouteConfigLoadEnd({ ...event }));\n            } else if (event instanceof RouteConfigLoadEnd) {\n                // console.log('RouteConfigLoadEnd', event);\n                events$.next(new NavigationEnd({ ...event }));\n            } else if (event instanceof NavigationEnd) {\n                const segments: string[] = [];\n                let source: RouteSnapshot | undefined = event.route;\n                while (source != null) {\n                    console.log(source.params, source.data);\n                    if (source.extractedUrl?.length) {\n                        segments.push(source.extractedUrl);\n                    }\n                    if (source.childRoute) {\n                        source = source.childRoute;\n                    } else {\n                        if (source.remainUrl?.length) {\n                            segments[segments.length - 1] = segments[segments.length - 1] + source.remainUrl;\n                        }\n                        source = undefined;\n                    }\n                }\n                const extractedUrl: string = segments.join('/').replace(/\\/\\//g, '/');\n                console.log('NavigationEnd', extractedUrl);\n                setHistory_(extractedUrl, undefined, event.trigger === 'popstate');\n                route$.next(event.route);\n            } else if (event instanceof NavigationCancel) {\n                console.log('NavigationCancel', event);\n            } else if (event instanceof NavigationError) {\n                console.log('NavigationError', event);\n            }\n        }),\n        shareReplay(1),\n    );\n}\n\n\n\n/*\nprivate static makeObserve$_____remove_(): Observable<RouterEvent> {\n    let currentRoute: RouteSnapshot | undefined;\n    const stateEvents$ = merge(fromEvent<PopStateEvent>(window, 'popstate')).pipe(\n        tap((event: PopStateEvent) => {\n            console.log('location', document.location.pathname, 'state', event.state);\n        }),\n        map(event => new NavigationStart({ routerLink: document.location.pathname, trigger: 'popstate' })),\n        shareReplay(1),\n    );\n    return merge(stateEvents$, RouterService.events$).pipe(\n        switchMap((event: RouterEvent) => {\n            if (event instanceof GuardsCheckStart && event.route.canActivate && event.route.canActivate.length) {\n                return combineLatest(...event.route.canActivate).pipe(\n                    map((values: boolean[]) => {\n                        const canActivate: boolean = values.reduce<boolean>((p: boolean, c: boolean) => {\n                            return p && c;\n                        }, true);\n                        if (canActivate) {\n                            return event;\n                        } else {\n                            return new NavigationCancel({ ...event, reason: 'Activation guard has dismissed navigation to route.' })\n                        }\n                    })\n                );\n            } else {\n                return of(event);\n            }\n        }),\n        tap((event: RouterEvent) => {\n            if (event instanceof NavigationStart) {\n                console.log('NavigationStart', event.routerLink);\n                const routerLink = event.routerLink;\n                // console.log('routerLink', routerLink);\n                let routeSnapshot: RouteSnapshot | undefined;\n                const initialUrl: string = serializeUrl_(routerLink);\n                const isRelative: boolean = initialUrl.indexOf('/') !== 0;\n                if (isRelative && currentRoute && currentRoute.children?.length) {\n                    routeSnapshot = currentRoute.children.reduce<RouteSnapshot | undefined>((p, r) => p || r.resolve(initialUrl), undefined);\n                    if (routeSnapshot) {\n                        currentRoute.childRoute = routeSnapshot;\n                        routeSnapshot = currentRoute;\n                    }\n                    // console.log('relative', currentRoute, routeSnapshot, initialUrl);\n                } else {\n                    routeSnapshot = RouterService.routes.reduce<RouteSnapshot | undefined>((p, r) => p || r.resolve(initialUrl), undefined);\n                    // console.log('absolute');\n                }\n                if (routeSnapshot != null) {\n                    currentRoute = routeSnapshot;\n                    RouterService.events$.next(new RoutesRecognized({ ...event, route: routeSnapshot }));\n                } else {\n                    RouterService.events$.next(new NavigationError({ ...event, error: new Error('unknown route') }));\n                }\n            } else if (event instanceof RoutesRecognized) {\n                // console.log('RoutesRecognized', event);\n                RouterService.events$.next(new GuardsCheckStart({ ...event }));\n            } else if (event instanceof GuardsCheckStart) {\n                RouterService.events$.next(new ChildActivationStart({ ...event }));\n            } else if (event instanceof ChildActivationStart) {\n                RouterService.events$.next(new ActivationStart({ ...event }));\n            } else if (event instanceof ActivationStart) {\n                RouterService.events$.next(new GuardsCheckEnd({ ...event }));\n            } else if (event instanceof GuardsCheckEnd) {\n                RouterService.events$.next(new ResolveStart({ ...event }));\n            } else if (event instanceof ResolveStart) {\n                RouterService.events$.next(new ResolveEnd({ ...event }));\n            } else if (event instanceof ResolveEnd) {\n                RouterService.events$.next(new ActivationEnd({ ...event }));\n            } else if (event instanceof ActivationEnd) {\n                RouterService.events$.next(new ChildActivationEnd({ ...event }));\n            } else if (event instanceof ChildActivationEnd) {\n                RouterService.events$.next(new RouteConfigLoadStart({ ...event }));\n\n            } else if (event instanceof RouteConfigLoadStart) {\n                // console.log('RouteConfigLoadStart', event);\n                RouterService.events$.next(new RouteConfigLoadEnd({ ...event }));\n            } else if (event instanceof RouteConfigLoadEnd) {\n                // console.log('RouteConfigLoadEnd', event);\n                RouterService.events$.next(new NavigationEnd({ ...event }));\n            } else if (event instanceof NavigationEnd) {\n                const segments: string[] = [];\n                let source: RouteSnapshot | undefined = event.route;\n                while (source != null) {\n                    console.log(source.params, source.data);\n                    if (source.extractedUrl?.length) {\n                        segments.push(source.extractedUrl);\n                    }\n                    if (source.childRoute) {\n                        source = source.childRoute;\n                    } else {\n                        if (source.remainUrl?.length) {\n                            segments[segments.length - 1] = segments[segments.length - 1] + source.remainUrl;\n                        }\n                        source = undefined;\n                    }\n                }\n                const extractedUrl: string = segments.join('/').replace(/\\/\\//g, '/');\n                console.log('NavigationEnd', extractedUrl);\n                setHistory_(extractedUrl, undefined, event.trigger === 'popstate');\n                RouterService.route$.next(event.route);\n            } else if (event instanceof NavigationCancel) {\n                console.log('NavigationCancel', event);\n            } else if (event instanceof NavigationError) {\n                console.log('NavigationError', event);\n            }\n        }),\n        shareReplay(1),\n    );\n}\n*/\n/*\nreturn Observable.create(function (observer: Observer<RouterEvent>) {\n    // observer.next(new RouterEvent());\n    // observer.complete();\n    // observer.error(new RouterErrorEvent());\n});\n*/","import { Directive, getContext, IFactoryMeta } from 'rxcomp';\nimport { fromEvent, Observable } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { INavigationExtras, serializeUrl_ } from '../route/route';\nimport { RouteSegment } from '../route/route-segment';\nimport { RouteComponent, RouterLink } from '../router.types';\nimport RouterService from './router.service';\n\nexport default class RouterLinkDirective extends Directive {\n\n    segments!: RouteSegment[];\n    private routerLink_!: RouteComponent[];\n    get routerLink(): RouterLink {\n        return this.routerLink_;\n    }\n    set routerLink(routerLink: RouterLink) {\n        this.routerLink_ = Array.isArray(routerLink) ? routerLink : [routerLink];\n        this.segments = this.getSegments(this.routerLink_);\n    }\n\n    getSegments(routerLink: RouteComponent[]): RouteSegment[] {\n        const segments: RouteSegment[] = [];\n        // console.log('RouterLinkDirective.getSegments', routerLink);\n        routerLink.forEach(item => {\n            if (typeof item === 'string') {\n                const regExp: RegExp = /([^:]+)|\\:([^\\/]+)/g;\n                const matches = item.matchAll(regExp);\n                const components = [];\n                for (let match of matches) {\n                    const g1 = match[1];\n                    const g2 = match[2];\n                    if (g1) {\n                        components.push(g1);\n                    } else if (g2) {\n                        const param: { [key: string]: any } = {};\n                        param[g2] = null;\n                        components.push(param);\n                    }\n                }\n            } else {\n                segments.push(new RouteSegment('', {}));\n            }\n            // console.log(segments);\n        });\n        return segments;\n    }\n\n    /*\n    get urlTree(): UrlTree {\n        return RouterService.createUrlTree(this.routerLink, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: this.preserve,\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: this.preserveFragment,\n        });\n    }\n    */\n\n    onInit() {\n        const { node } = getContext(this);\n        const event$: Observable<Event> = fromEvent<Event>(node, 'click').pipe(shareReplay(1));\n        event$.pipe(\n            takeUntil(this.unsubscribe$)\n        ).subscribe(event => {\n            // console.log('RouterLinkDirective', event, this.routerLink);\n            const navigationExtras: INavigationExtras = {\n                skipLocationChange: this.skipLocationChange,\n                replaceUrl: this.replaceUrl,\n                state: this.state,\n            };\n            RouterService.setRouterLink(this.routerLink, navigationExtras);\n            // RouterService.navigateByUrl(this.urlTree, extras);\n            /*\n            setTimeout(function () {\n                event.target?.dispatchEvent(event);\n            }, 1);\n            */\n            event.preventDefault();\n            return false;\n        });\n    }\n\n    onChanges() {\n        const { node } = getContext(this);\n        node.setAttribute('href', serializeUrl_(this.routerLink));\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[routerLink],[[routerLink]]',\n        inputs: ['routerLink'],\n    };\n}\n","import { Component, Factory, getContext, IComment, IElement, IFactoryMeta, Structure } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport RouterService from './router.service';\n\nexport default class RouterOutletStructure extends Structure {\n    static first: boolean = false;\n\n    outlet!: IComment;\n    element?: IElement;\n    instance?: Component;\n    private route_?: RouteSnapshot;\n    get route(): RouteSnapshot | undefined {\n        return this.route_;\n    }\n    set route(route: RouteSnapshot | undefined) {\n        if (this.route_ && route && this.route_.component === route.component) {\n            this.route_.next(route);\n            // } else if (this.route_?.component !== route?.component) {\n        } else {\n            this.route_ = route;\n            this.component = route?.component;\n        }\n    }\n\n    private component_?: typeof Component;\n    get component(): typeof Component | undefined {\n        return this.component_;\n    }\n    set component(component: typeof Component | undefined) {\n        const { module, node } = getContext(this);\n        if (true || this.component_ !== component) { // !!! fix\n            this.component_ = component;\n            if (this.element) {\n                this.element.parentNode!.removeChild(this.element);\n                module.remove(this.element, this);\n                this.element = undefined;\n                this.instance = undefined;\n            }\n            if (component && component.meta.template) {\n                let element: IElement = document.createElement('div');\n                element.innerHTML = component.meta.template;\n                if (element.children.length === 1) {\n                    element = element.firstElementChild as IElement;\n                }\n                node.appendChild(element);\n                const instance: Factory | undefined = module.makeInstance(element, component, component.meta.selector!, this);\n                module.compile(element, instance);\n                this.instance = instance;\n                this.element = element;\n                /*\n                if (instance) {\n                    // const forItemContext = getContext(instance);\n                    // console.log('ForStructure', clonedNode, forItemContext.instance.constructor.name);\n                    // module.compile(clonedNode, forItemContext.instance);\n                    // node.appendChild(element);\n                    // nextSibling = clonedNode.nextSibling;\n                    // this.instance = instance;\n                    // this.element = element;\n                    // this.outlet.parentNode?.insertBefore(element, this.outlet);\n                }\n                */\n            }\n        }\n    }\n\n    onInit() {\n        if (!this.host) {\n            RouterService.route$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe(route => {\n                this.route = route;\n                this.pushChanges();\n            });\n        }\n        /*\n        const { node } = getContext(this);\n        const outlet: IComment = this.outlet = document.createComment(`outlet`);\n        outlet.rxcompId = node.rxcompId;\n        node.parentNode!.replaceChild(outlet, node);\n        */\n    }\n\n    onChanges() {\n        if (this.host) {\n            this.route = this.host.route.childRoute;\n            // console.log('RouterOutletStructure.onChanges', this.route);\n        }\n    }\n\n    static meta: IFactoryMeta = {\n        selector: 'router-outlet,[router-outlet]',\n        hosts: { host: RouterOutletStructure },\n    };\n}\n","import { Factory, IModuleMeta, Module, Pipe } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { IRoute } from './route/route';\nimport RouterLinkDirective from './router/router-link.directive';\nimport RouterOutletStructure from './router/router-outlet.structure';\nimport RouterService from './router/router.service';\n\nconst factories: typeof Factory[] = [\n\tRouterOutletStructure,\n\tRouterLinkDirective,\n];\n\nconst pipes: typeof Pipe[] = [\n];\n\n/**\n *  RouterModule Class.\n * @example\n * export default class AppModule extends Module {}\n *\n * AppModule.meta = {\n *  imports: [\n *   CoreModule,\n *    RouterModule\n *  ],\n *  declarations: [\n *   ErrorsComponent\n *  ],\n *  bootstrap: AppComponent,\n * };\n * @extends Module\n */\nexport default class RouterModule extends Module {\n\n\tconstructor() {\n\t\tsuper();\n\t\t// console.log('RouterModule');\n\t\tRouterService.observe$.pipe(\n\t\t\ttakeUntil(this.unsubscribe$),\n\t\t).subscribe();\n\t\tRouterService.navigate(window.location.pathname + window.location.search + window.location.hash);\n\t}\n\n\tstatic meta: IModuleMeta = {\n\t\tdeclarations: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t],\n\t\texports: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t]\n\t};\n\n\tstatic forRoot(routes: IRoute[]): typeof RouterModule {\n\t\tRouterService.setRoutes(routes);\n\t\treturn RouterModule;\n\t}\n\n}\n","import { Component, errors$, getContext, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\n\nexport default class AppComponent extends Component {\n\terror: any = null;\n\n\tonInit() {\n\t\t// console.log('AppComponent.onInit', this);\n\t\tconst { node } = getContext(this);\n\t\tnode.classList.add('init');\n\t\terrors$.pipe(\n\t\t\ttakeUntil(this.unsubscribe$),\n\t\t).subscribe(error => {\n\t\t\tthis.error = error;\n\t\t\tthis.pushChanges();\n\t\t});\n\t}\n\n\tstatic meta: IFactoryMeta = {\n\t\tselector: '[app-component]',\n\t};\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouteSnapshot } from '../../../../src/router/router.service';\nimport { RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class ContactsComponent extends Component {\n    onInit() {\n        (this.host.route as RouteSnapshot).data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[contacts-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-contacts\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouteSnapshot } from '../../../../src/router/router.service';\nimport { RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class DetailComponent extends Component {\n    onInit() {\n        (this.host.route as RouteSnapshot).data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n        (this.host.route as RouteSnapshot).params$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((params) => this.detailId = params.detailId);\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[detail-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-detail\">\n            <div class=\"title\">Detail {{detailId}}</div>\n            <ul class=\"nav--menu\">\n                <li><a routerLink=\"media\" routerLinkActive=\"active\">Media</a></li>\n                <li><a routerLink=\"files\" routerLinkActive=\"active\">Files</a></li>\n            </ul>\n            <router-outlet></router-outlet>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouteSnapshot } from '../../../../src/router/router.service';\nimport { RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class IndexComponent extends Component {\n    onInit() {\n        (this.host.route as RouteSnapshot).data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[index-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-index\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\n\nexport default class NotFoundComponent extends Component {\n    onInit() {\n        // console.log('NotFoundComponent.onInit');\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[not-found-component]',\n        template: /* html */`\n        <div class=\"page-not-found\">\n            <div class=\"title\">Not Found</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouteSnapshot } from '../../../../src/router/router.service';\nimport { RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class SubComponent extends Component {\n    onInit() {\n        (this.host.route as RouteSnapshot).data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[sub-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-sub\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { Component, CoreModule, IModuleMeta, Module } from 'rxcomp';\nimport { Route } from '../../../src/route/route';\nimport { ICanActivate, ICanActivateChild, ICanDeactivate, ICanLoad } from '../../../src/route/route-activators';\nimport { RouteSegment } from '../../../src/route/route-segment';\nimport { RouteSnapshot } from '../../../src/route/route-snapshot';\nimport { RouterActivatorResult } from '../../../src/router.types';\nimport { RouterModule } from '../../../src/rxcomp-router';\nimport AppComponent from './app.component';\nimport ContactsComponent from './pages/contacts.component';\nimport DetailComponent from './pages/detail.component';\nimport IndexComponent from './pages/index.component';\nimport NotFoundComponent from './pages/not-found.component';\nimport SubComponent from './pages/sub.component';\n\nexport class CustomActivator implements ICanActivate, ICanDeactivate<Component>, ICanActivateChild, ICanLoad {\n\tcanDeactivate<T>(component: T, currentRoute: RouteSnapshot): RouterActivatorResult {\n\t\treturn true;\n\t}\n\tcanLoad(route: Route, segments: RouteSegment[]): RouterActivatorResult {\n\t\treturn true;\n\t}\n\tcanActivate(route: RouteSnapshot): RouterActivatorResult {\n\t\tconsole.log('canActivate', route);\n\t\treturn false;\n\t}\n\tcanActivateChild(childRoute: RouteSnapshot): RouterActivatorResult {\n\t\treturn true;\n\t}\n}\n\nexport default class AppModule extends Module {\n\n\tstatic meta: IModuleMeta = {\n\t\timports: [\n\t\t\tCoreModule,\n\t\t\tRouterModule.forRoot([\n\t\t\t\t{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\t\t\t\t{ path: 'dashboard', component: IndexComponent, data: { title: 'Dashboard' } },\n\t\t\t\t{\n\t\t\t\t\tpath: 'detail/:detailId', component: DetailComponent, data: { title: 'Detail' },\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{ path: 'media', component: SubComponent, data: { title: 'Media' } },\n\t\t\t\t\t\t{ path: 'files', component: SubComponent, data: { title: 'Files' } }\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{ path: 'contacts', component: ContactsComponent, data: { title: 'Contacts' }, canActivate: [new CustomActivator()] },\n\t\t\t\t{ path: '**', component: NotFoundComponent },\n\t\t\t]),\n\t\t],\n\t\tdeclarations: [\n\t\t\tIndexComponent,\n\t\t\tDetailComponent,\n\t\t\tContactsComponent,\n\t\t],\n\t\tbootstrap: AppComponent,\n\t};\n\n}\n","import { Browser } from 'rxcomp';\nimport AppModule from './app.module';\n\nBrowser.bootstrap(AppModule);\n"]}