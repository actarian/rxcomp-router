{"version":3,"sources":["www/browser/src/main.browser.ts","../../src/core/view.ts","../../src/location/location.strategy.ts","../../src/route/route-activators.ts","../../src/route/route-segment.ts","../../src/route/route.ts","../../src/route/route-path.ts","../../src/route/route-snapshot.ts","../../src/router/router-events.ts","../../src/router/router.service.ts","../../src/router/router-link.directive.ts","../../src/router/router-link-active.directive.ts","../../src/router/router-outlet.structure.ts","../../src/router.module.ts","../../src/router.types.ts","../../src/transition/transition.ts","../../www/browser/src/app.component.ts","../../www/browser/src/custom-activator/custom-activator.ts","../../www/browser/src/pages/contacts.component.ts","../../www/browser/src/pages/data.component.ts","../../www/browser/src/pages/detail.component.ts","../../www/browser/src/pages/index.component.ts","../../www/browser/src/pages/not-found.component.ts","../../www/browser/src/pages/sub.component.ts","../../www/browser/src/app.module.ts","../../www/browser/src/main.browser.ts"],"names":["rxcomp","rxjs","operators","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_defineProperty","obj","value","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","toString","call","slice","name","from","test","_unsupportedIterableToArray","done","TypeError","next","bind","View","_Component","this","_proto","onEnter","node","of","onExit","Component","LocationStrategy","serializeLink","routerLink","_this","url","map","x","encodeParams","join","serializeUrl","serialize","routePath","prefix","path","search","hash","resolve","segments","params","_step","query","_iterator","matchAll","match","g1","g2","g3","substring","split","resolveParams","routeSegments","_this2","segment","index","decodeParams","encoded","decoded","indexOf","json","window","atob","JSON","parse","error","Number","stringify","btoa","console","log","decodeSegment","s","decodeString","replace","encodeSegment","encodeString","decodeURIComponent","encodeURIComponent","getPath","getUrl","setHistory","popped","isPlatformBrowser","history","pushState","title","document","replaceState","undefined","LocationStrategyPath","_LocationStrategy","_proto2","_step2","_iterator2","_LocationStrategy2","LocationStrategyHash","_proto3","_this3","_step3","_iterator3","isPromise","Promise","makeObserver$_","callback","Observable","observer","subscription","result","isObservable","subscribe","complete","then","Error","unsubscribe","RouteSegment","Route","options","pathMatch","relative","canDeactivate","canLoad","canActivate","canActivateChild","assign","activator","component","currentRoute","route","childRoute","children","iRoute","parent","matcher","RegExp","matchers","param","regexp","RoutePath","snapshot","locationStrategy","get","url_","set","routeSegments_","RouteSnapshot","data$","ReplaySubject","params$","queryParams$","data","queryParams","RouterEvent","NavigationStart","_RouterEvent","RoutesRecognized","_RouterEvent2","GuardsCheckStart","_RouterEvent3","ChildActivationStart","_RouterEvent4","ActivationStart","_RouterEvent5","GuardsCheckEnd","_RouterEvent6","ResolveStart","_RouterEvent7","ResolveEnd","_RouterEvent8","ActivationEnd","_RouterEvent9","ChildActivationEnd","_RouterEvent10","RouteConfigLoadStart","_RouterEvent11","RouteConfigLoadEnd","_RouterEvent12","NavigationEnd","_RouterEvent13","NavigationCancel","_RouterEvent14","NavigationError","_RouterEvent15","RouterService","setRoutes","routes","observe$","makeObserve$_","route$","events$","setRouterLink","extras","trigger","navigate","findRoute","initialUrl","findRouteByUrl","resolvedRoute","getFlatRoutes_","find","urlAfterRedirects","redirectTo","lastPath","r","unshift","extractedUrl","useLocationStrategy","locationStrategyType","locationStrategy_","reduceRoutes","reduce","p","c","resolveRoutes_","childRoutes","resolveRoute_","_route$children","remainUrl","makeActivatorResponse$_","event","activators","combineLatest","pipe","values","cancelEvent","reason","stateEvents$","merge","fromEvent","location","pathname","shareReplay","switchMap","instance","makeCanDeactivateResponse$_","nextEvent","makeCanLoadResponse$_","routeActivators","reduceChildRouteActivators_","makeCanActivateChildResponse$_","makeCanActivateResponse$_","tap","_currentRoute$childre","_source$extractedUrl","_source$remainUrl","currentSnapshot","snapshots","getFlatSnapshots_","clearRoutes_","catchError","RouterLinkDirective","_Directive","getSegments","item","components","onInit","getContext","takeUntil","unsubscribe$","navigationExtras","skipLocationChange","replaceUrl","state","preventDefault","onChanges","routerLink_","setAttribute","Directive","selector","inputs","RouterLinkActiveDirective","classList","remove","isActive","routerLinkActive","add","_path$route","host","hosts","RouterOutletStructure","_Structure","route$_","_this$host$route","factory$","_this$host$route2","route_","snapshot_","_this4","_getContext","module","factory","factory_","onExit$_","element","parentNode","removeChild","meta","template","createElement","innerHTML","firstElementChild","appendChild","makeInstance","compile","onEnter$_","asObservable_","Structure","args","RouteLocationStrategy","factories","pipes","RouterModule","_Module","_this$instances","instances","pushChanges","forRoot","useStrategy","Module","transition$","declarations","concat","exports","AppComponent","errors$","customActivator","CustomActivator","ContactsComponent","DataComponent","datas","DetailComponent","_View","detailId","gsap","opacity","to","duration","ease","Power3","easeInOut","onComplete","IndexComponent","NotFoundComponent","SubComponent","AppModule","imports","CoreModule","bootstrap","Browser"],"mappings":"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","file":"docs/js/main.min.js","sourcesContent":[null,"\nimport { Component, IElement } from 'rxcomp';\nimport { Observable, of } from 'rxjs';\n\nexport default class View extends Component {\n\n    onEnter(node: IElement): Observable<boolean> | Promise<boolean> | (() => boolean) | boolean { return of(true); }\n    onExit(node: IElement): Observable<boolean> | Promise<boolean> | (() => boolean) | boolean { return of(true); }\n\n}\n","import { isPlatformBrowser } from \"rxcomp\";\nimport { IRoutePath } from \"../route/route-path\";\nimport { RouterKeyValue, RouterLink } from \"../router.types\";\nimport { RouteSegment } from \"../rxcomp-router\";\n\nexport interface ILocationStrategy {\n    serializeLink(routerLink: RouterLink): string;\n    serializeUrl(url: string): string;\n    serialize(routePath: IRoutePath): string;\n    resolve(url: string, target: IRoutePath): IRoutePath;\n    resolveParams(path: string, routeSegments: RouteSegment[]): { [key: string]: any };\n    decodeParams(encoded: string | null): any | null;\n    encodeParams(value: any): string | null;\n    decodeSegment(s: string): string;\n    encodeSegment(s: string): string;\n    decodeString(s: string): string;\n    encodeString(s: string): string;\n    getPath(url: string): string;\n    getUrl(url: string, params?: URLSearchParams): string;\n    setHistory(url: string, params?: URLSearchParams, popped?: boolean): void;\n}\n\nexport class LocationStrategy implements ILocationStrategy {\n    serializeLink(routerLink: RouterLink): string {\n        const url: string = (Array.isArray(routerLink) ? routerLink : [routerLink]).map(x => {\n            return typeof x === 'string' ? x : this.encodeParams(x);\n        }).join('/');\n        return this.serializeUrl(url);\n    }\n    serializeUrl(url: string): string {\n        return url;\n    }\n    serialize(routePath: IRoutePath): string {\n        return `${routePath.prefix}${routePath.path}${routePath.search}${routePath.hash}`;\n    }\n    resolve(url: string, target: IRoutePath = {}): IRoutePath {\n        let prefix: string = '';\n        let path: string = '';\n        let query: string = '';\n        let search: string = '';\n        let hash: string = '';\n        let segments: string[];\n        let params: { [key: string]: any };\n        const regExp: RegExp = /^([^\\?|\\#]*)?(\\?[^\\#]*)?(\\#[^\\#]*?)?$/gm;\n        const matches = url.matchAll(regExp);\n        for (let match of matches) {\n            const g1 = match[1];\n            const g2 = match[2];\n            const g3 = match[3];\n            if (g1) {\n                path = g1;\n            }\n            if (g2) {\n                query = g2;\n            }\n            if (g3) {\n                hash = g3;\n            }\n        }\n        prefix = prefix;\n        path = path;\n        query = query;\n        hash = hash.substring(1, hash.length);\n        search = query.substring(1, query.length);\n        segments = path.split('/').filter(x => x !== '');\n        params = {};\n        target.prefix = prefix;\n        target.path = path;\n        target.query = query;\n        target.hash = hash;\n        target.search = search;\n        target.segments = segments;\n        target.params = params;\n        // console.log('resolvePath_', url, prefix, path, query, search, hash, segments, params);\n        return target;\n    }\n    resolveParams(path: string, routeSegments: RouteSegment[]): { [key: string]: any } {\n        const segments: string[] = path.split('/').filter(x => x !== '');\n        const params: RouterKeyValue = {};\n        routeSegments.forEach((segment: RouteSegment, index: number) => {\n            // console.log('segment.params', segment.params);\n            const keys: string[] = Object.keys(segment.params);\n            if (keys.length) {\n                params[keys[0]] = this.decodeParams(segments[index]);\n            }\n        });\n        return params;\n    }\n    decodeParams(encoded: string | null = null): any | null {\n        let decoded: any | null = encoded;\n        if (encoded) {\n            if (encoded.indexOf(';') === 0) {\n                try {\n                    const json = window.atob(encoded.substring(1, encoded.length));\n                    // const json = encoded;\n                    decoded = JSON.parse(json);\n                } catch (error) {\n                    // console.log('decodeParam_.error', error);\n                    decoded = encoded;\n                }\n            } else if (Number(encoded).toString() === encoded) {\n                decoded = Number(encoded);\n            }\n        }\n        return decoded;\n    }\n    encodeParams(value: any): string | null {\n        let encoded: string | null = null;\n        try {\n            if (typeof value === 'object') {\n                const json = JSON.stringify(value);\n                encoded = ';' + window.btoa(json);\n                // encoded = json;\n            } else if (typeof value === 'number') {\n                encoded = value.toString();\n            }\n        } catch (error) {\n            console.log('encodeParam__.error', error);\n        }\n        return encoded;\n    }\n    decodeSegment(s: string): string {\n        return this.decodeString(s.replace(/%28/g, '(').replace(/%29/g, ')').replace(/\\&/gi, '%26'));\n    }\n    encodeSegment(s: string): string {\n        return this.encodeString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n    }\n    decodeString(s: string): string {\n        return decodeURIComponent(s.replace(/\\@/g, '%40').replace(/\\:/gi, '%3A').replace(/\\$/g, '%24').replace(/\\,/gi, '%2C'));\n    }\n    encodeString(s: string): string {\n        return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n    }\n    getPath(url: string): string {\n        return url;\n    }\n    getUrl(url: string, params?: URLSearchParams): string {\n        return `${url}${params ? '?' + params.toString() : ''}`;\n    }\n    setHistory(url: string, params?: URLSearchParams, popped?: boolean): void {\n        if (isPlatformBrowser && window.history && window.history.pushState) {\n            const title = document.title;\n            url = this.getUrl(url, params);\n            // !!!\n            // const state = params ? params.toString() : '';\n            // console.log(state);\n            if (popped) {\n                window.history.replaceState(undefined, title, url);\n            } else {\n                window.history.pushState(undefined, title, url);\n            }\n        }\n    }\n}\n\nexport class LocationStrategyPath extends LocationStrategy implements ILocationStrategy {\n    constructor() {\n        super();\n    }\n    serialize(routePath: IRoutePath): string {\n        return `${routePath.prefix}${routePath.path}${routePath.search}${routePath.hash}`;\n    }\n    resolve(url: string, target: IRoutePath = {}): IRoutePath {\n        let prefix: string = '';\n        let path: string = '';\n        let query: string = '';\n        let search: string = '';\n        let hash: string = '';\n        let segments: string[];\n        let params: { [key: string]: any };\n        const regExp: RegExp = /^([^\\?|\\#]*)?(\\?[^\\#]*)?(\\#[^\\#]*?)?$/gm;\n        const matches = url.matchAll(regExp);\n        for (let match of matches) {\n            const g1 = match[1];\n            const g2 = match[2];\n            const g3 = match[3];\n            if (g1) {\n                path = g1;\n            }\n            if (g2) {\n                query = g2;\n            }\n            if (g3) {\n                hash = g3;\n            }\n        }\n        prefix = prefix;\n        path = path;\n        query = query;\n        hash = hash.substring(1, hash.length);\n        search = query.substring(1, query.length);\n        segments = path.split('/').filter(x => x !== '');\n        params = {};\n        target.prefix = prefix;\n        target.path = path;\n        target.query = query;\n        target.hash = hash;\n        target.search = search;\n        target.segments = segments;\n        target.params = params;\n        // console.log('resolvePath_', url, prefix, path, query, search, hash, segments, params);\n        return target;\n    }\n}\n\nexport class LocationStrategyHash extends LocationStrategy implements ILocationStrategy {\n    constructor() {\n        super();\n    }\n    serializeLink(routerLink: RouterLink): string {\n        const url: string = (Array.isArray(routerLink) ? routerLink : [routerLink]).map(x => {\n            return typeof x === 'string' ? x : this.encodeParams(x);\n        }).join('/');\n        return this.serializeUrl(url);\n    }\n    serializeUrl(url: string): string {\n        const path: IRoutePath = this.resolve(url, {});\n        return this.serialize(path);\n    }\n    serialize(routePath: IRoutePath): string {\n        return `${routePath.prefix}${routePath.search}${routePath.hash}${routePath.path}`;\n    }\n    resolve(url: string, target: IRoutePath = {}): IRoutePath {\n        let prefix: string = '';\n        let path: string = '';\n        let query: string = '';\n        let search: string = '';\n        let hash: string = '#';\n        let segments: string[];\n        let params: { [key: string]: any };\n        const regExp: RegExp = /^([^\\?|\\#]*)?(\\?[^\\#]*)?(\\#.*)$/gm;\n        const matches = url.matchAll(regExp);\n        for (let match of matches) {\n            const g1 = match[1];\n            const g2 = match[2];\n            const g3 = match[3];\n            if (g1) {\n                prefix = g1;\n            }\n            if (g2) {\n                query = g2;\n            }\n            if (g3) {\n                path = g3;\n            }\n        }\n        prefix = prefix;\n        path = path.substring(1, path.length);\n        hash = hash;\n        search = query.substring(1, query.length);\n        segments = path.split('/').filter(x => x !== '');\n        params = {};\n        target.prefix = prefix;\n        target.path = path;\n        target.query = query;\n        target.hash = hash;\n        target.search = search;\n        target.segments = segments;\n        target.params = params;\n        // console.log('resolvePath_', url, prefix, path, query, search, hash, segments, params);\n        return target;\n    }\n    getPath(url: string): string {\n        if (url.indexOf(`/#`) === -1) {\n            return `/#${url}`;\n        } else {\n            return url;\n        }\n    }\n    getUrl(url: string, params?: URLSearchParams): string {\n        return `${params ? '?' + params.toString() : ''}${this.getPath(url)}`;\n    }\n}\n","import { isObservable, Observable, Observer, Subscription } from 'rxjs';\nimport { RouteComponent, RouterActivatorResult } from '../router.types';\nimport { RouteSegment } from './route-segment';\nimport { RouteSnapshot } from './route-snapshot';\n\nexport interface ICanDeactivate<T> {\n    canDeactivate(component: T, currentRoute: RouteSnapshot): RouterActivatorResult\n}\n\nexport interface ICanLoad {\n    canLoad(route: RouteSnapshot, segments: RouteSegment[]): RouterActivatorResult\n}\n\nexport interface ICanActivate {\n    canActivate(route: RouteSnapshot): RouterActivatorResult\n}\n\nexport interface ICanActivateChild {\n    canActivateChild(childRoute: RouteSnapshot): RouterActivatorResult\n}\n\nexport function mapCanDeactivate$_<T>(activator: ICanDeactivate<T>): (component: T, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canDeactivate$(component: T, currentRoute: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canDeactivate(component, currentRoute));\n    };\n}\nexport function mapCanLoad$_(activator: ICanLoad): (route: RouteSnapshot, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]> {\n    return function canLoad$$(route: RouteSnapshot, segments: RouteSegment[]): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canLoad(route, segments));\n    };\n}\nexport function mapCanActivate$_(activator: ICanActivate): (route: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canActivate$(route: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canActivate(route));\n    };\n}\nexport function mapCanActivateChild$_(activator: ICanActivateChild): (childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]> {\n    return function canActivateChild$(childRoute: RouteSnapshot): Observable<boolean | RouteComponent[]> {\n        return makeObserver$_(() => activator.canActivateChild(childRoute));\n    };\n}\nexport function isPromise<T>(object: any): object is Promise<T> {\n    return object instanceof Promise || (typeof object === 'object' && 'then' in object && typeof object['then'] === 'function');\n}\n\nfunction makeObserver$_(callback: () => RouterActivatorResult) {\n    return Observable.create(function (observer: Observer<boolean | RouteComponent[]>) {\n        let subscription: Subscription;\n        try {\n            let result: RouterActivatorResult = callback();\n            if (isObservable(result)) {\n                subscription = result.subscribe(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (isPromise<boolean | RouteComponent[]>(result)) {\n                (result as Promise<boolean | RouteComponent[]>).then(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (typeof result === 'boolean' || Array.isArray(result)) {\n                observer.next(result);\n                observer.complete();\n            } else {\n                observer.error(new Error('invalid value'));\n            }\n        } catch (error) {\n            observer.error(error);\n        }\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n    });\n}\n\n","import { RouterKeyValue } from '../router.types';\n\nexport class RouteSegment {\n    path: string;\n    params: any;\n    constructor(path: string, params: RouterKeyValue = {}) {\n        this.path = path;\n        this.params = params;\n    }\n    /*\n    toString(): string {\n        return `${encodeSegment_(this.path)}${encodeParams_(this.params)}`;\n    }\n    */\n}\n/*\nexport function encodeParams_(params: RouterKeyValue): string {\n    // !!! array?\n    return Object.keys(params).map(key => `;${encodeSegment_(key)}=${typeof params[key] === 'string' ? encodeSegment_(params[key] as string) : encodeParams_(params[key] as RouterKeyValue)}`).join('');\n}\nexport function encodeSegment_(s: string): string {\n    return encodeString_(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\nexport function encodeString_(s: string): string {\n    return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\nexport function decodeParams_(encodedParams: string): RouterKeyValue {\n    const params: RouterKeyValue = {} as RouterKeyValue;\n    const keyValues = encodedParams.split(';');\n    keyValues.forEach((x: string) => {\n        const kvs: string[] = x.split('=');\n        if (kvs.length === 2) {\n            params[kvs[0]] = kvs[1];\n        }\n    });\n    return params;\n}\nexport function decodeParams__<T>(encoded: string | null = null): T | null {\n    let decoded = null;\n    if (encoded) {\n        try {\n            const json = window.atob(encoded);\n            decoded = JSON.parse(json) as T;\n        } catch (error) {\n            console.log('decodeParam_.error', error);\n        }\n    }\n    return decoded;\n}\nexport function encodeParams__(value: any): string | null {\n    let encoded = null;\n    try {\n        const json = JSON.stringify(value);\n        encoded = window.btoa(json);\n    } catch (error) {\n        console.log('encodeParam__.error', error);\n    }\n    return encoded;\n}\nexport function resolveParams__(url: string, routeSegments: RouteSegment[]): RouterKeyValue {\n    // console.log('resolveParams__.resolvedRoute.routeSegments', routeSegments);\n    const path: string = url.split('?')[0];\n    const query: string = url.substring(path.length, url.length);\n    const search: string = query.split('#')[0];\n    const hash: string = query.substring(search.length, query.length);\n    const segments: string[] = path.split('/').filter(x => x !== '');\n    const params: RouterKeyValue = {};\n    routeSegments.forEach((segment: RouteSegment, index: number) => {\n        // console.log('segment.params', segment.params);\n        const keys: string[] = Object.keys(segment.params);\n        if (keys.length) {\n            params[keys[0]] = decodeParams_(segments[index]);\n        }\n    });\n    return params;\n}\n*/","import { Component, Factory } from 'rxcomp';\nimport { Observable } from 'rxjs';\nimport { Data, RouteComponent, RouterKeyValue } from '../router.types';\nimport { ICanActivate, ICanActivateChild, ICanDeactivate, ICanLoad, mapCanActivate$_, mapCanActivateChild$_, mapCanDeactivate$_, mapCanLoad$_ } from './route-activators';\nimport { RouteSegment } from './route-segment';\nimport { RouteSnapshot } from './route-snapshot';\n\nexport type IRoutes = IRoute[];\nexport type Routes = Route[];\n\nexport interface INavigationExtras {\n    relativeTo?: RouteSnapshot | null;\n    queryParams?: RouterKeyValue; // Params | null;\n    fragment?: string;\n    preserveQueryParams?: boolean;\n    queryParamsHandling?: any; // QueryParamsHandling | null;\n    preserveFragment?: boolean;\n    skipLocationChange?: boolean;\n    replaceUrl?: boolean;\n    state?: { [key: string]: any };\n}\n\nexport interface IBaseRoute {\n    path?: string;\n    pathMatch?: 'prefix' | 'full';\n    component?: typeof Component;\n    // matcher?: UrlMatcher;\n    matcher?: RegExp;\n    redirectTo?: string;\n    outlet?: string;\n    children?: IRoutes | Routes;\n    // children?: IRoute[];\n    initialUrl?: string;\n    urlAfterRedirects?: string;\n    extractedUrl?: string;\n    remainUrl?: string;\n    // resolve?: ResolveData;\n    // loadChildren?: LoadChildren;\n    // runGuardsAndResolvers?: RunGuardsAndResolvers;\n    data?: Data;\n    params?: RouterKeyValue;\n    queryParams?: RouterKeyValue;\n}\n\nexport interface IRoute extends IBaseRoute {\n    canActivate?: ICanActivate[];\n    canActivateChild?: ICanActivateChild[];\n    canDeactivate?: ICanDeactivate<Component>[];\n    canLoad?: ICanLoad[];\n}\n\nexport class Route implements IBaseRoute {\n    path!: string;\n    pathMatch: 'prefix' | 'full' = 'prefix';\n    component!: typeof Component; // import !!!\n    matcher: RegExp;\n    redirectTo?: string;\n    segments: RouteSegment[];\n    relative: boolean = true;\n    children?: Routes;\n    parent?: Route;\n    snapshot?: RouteSnapshot;\n    canDeactivate: ((component: Factory, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canLoad: ((route: RouteSnapshot, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivate: ((route: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivateChild: ((childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    constructor(options?: IRoute) {\n        if (options) {\n            Object.assign(this, options);\n            this.canDeactivate = options.canDeactivate ? options.canDeactivate.map(x => mapCanDeactivate$_<Component>(x)) : [];\n            this.canLoad = options.canLoad ? options.canLoad.map(x => mapCanLoad$_(x)) : [];\n            this.canActivate = options.canActivate ? options.canActivate.map(x => mapCanActivate$_(x)) : [];\n            this.canActivateChild = options.canActivateChild ? options.canActivateChild.map(x => mapCanActivateChild$_(x)) : [];\n        }\n        if (this.children) {\n            this.children = this.children.map((iRoute: IBaseRoute) => {\n                const route = new Route(iRoute);\n                route.parent = this;\n                return route;\n            });\n        }\n        const segments: RouteSegment[] = [];\n        if (this.path === '**') {\n            segments.push(new RouteSegment(this.path));\n            this.matcher = new RegExp('^.*$');\n        } else {\n            const matchers: string[] = [`^(\\.\\.\\/|\\.\\/|\\/\\/|\\/)?`];\n            const regExp: RegExp = /(^\\.\\.\\/|\\.\\/|\\/\\/|\\/)|([^:|\\/]+)\\/?|\\:([^\\/]+)\\/?/g;\n            const matches = this.path.matchAll(regExp);\n            for (let match of matches) {\n                const g1 = match[1];\n                const g2 = match[2];\n                const g3 = match[3];\n                if (g1) {\n                    this.relative = !(g1 === '//' || g1 === '/');\n                } else if (g2) {\n                    matchers.push(g2);\n                    segments.push(new RouteSegment(g2));\n                } else if (g3) {\n                    matchers.push('(\\/[^\\/]+)');\n                    const param: { [key: string]: any } = {};\n                    param[g3] = null;\n                    segments.push(new RouteSegment('', param));\n                }\n            }\n            if (this.pathMatch === 'full') {\n                matchers.push('$');\n            }\n            const regexp: string = matchers.join('');\n            this.matcher = new RegExp(regexp);\n        }\n        this.segments = segments;\n    }\n}\n","import { ILocationStrategy, LocationStrategy } from '../location/location.strategy';\nimport { RouterKeyValue } from '../router.types';\nimport { Route } from './route';\nimport { RouteSegment } from './route-segment';\n\nexport interface IRoutePath {\n    url?: string;\n    prefix?: string;\n    path?: string;\n    query?: string;\n    search?: any;\n    hash?: any;\n    params?: { [key: string]: any };\n    segments?: string[];\n}\n\nexport class RoutePath implements IRoutePath {\n    private url_!: string;\n    get url(): string {\n        return this.url_;\n    }\n    set url(url: string) {\n        // console.log(this.url_, url);\n        if (this.url_ !== url) {\n            this.locationStrategy.resolve(url, this);\n            // resolvePath_(url, this, this.locationStrategy);\n            this.url_ = this.locationStrategy.serialize(this);\n            // serializeUrl_(this, this.locationStrategy);\n            // this.url_ = url; // !!! serialize url;\n            // console.log('url_', this.url_);\n        }\n    }\n    private routeSegments_!: RouteSegment[];\n    get routeSegments(): RouteSegment[] {\n        return this.routeSegments_;\n    }\n    set routeSegments(routeSegments: RouteSegment[]) {\n        if (this.routeSegments_ !== routeSegments) {\n            this.routeSegments_ = routeSegments;\n            // !!! const path: string = this.locationStrategy === RouteLocationStrategy.Hash ? this.hash : this.path;\n            // this.params = resolveParams_(this.path, routeSegments);\n            this.params = this.locationStrategy.resolveParams(this.path, routeSegments);\n        }\n    }\n    get remainUrl(): string {\n        return this.query + this.hash;\n    }\n    prefix: string = '';\n    path: string = '';\n    query: string = '';\n    search: string = '';\n    hash: string = '';\n    params!: { [key: string]: any };\n    segments!: string[];\n    route?: Route;\n    locationStrategy: ILocationStrategy;\n    constructor(url: string = '', routeSegments: RouteSegment[] = [], snapshot?: Route, locationStrategy?: ILocationStrategy) {\n        this.locationStrategy = locationStrategy || new LocationStrategy();\n        this.url = url;\n        this.routeSegments = routeSegments;\n        this.route = snapshot;\n    }\n    /*\n    toString(): string {\n        return this.url_;\n        // return `${encodeSegment_(this.path)}${encodeParams_(this.params)}`;\n    }\n    */\n}\n\n/*\n\nexport function serializeUrl_(target: IRoutePath, locationStrategy: ILocationStrategy): string {\n    // return `${target.path!}${target.search}${target.hash}`;\n    return locationStrategy.serialize(target);\n}\n\n// !!! todo: resolvePath_ in LocationStrategy interface\n\nexport function resolvePath_(url: string, target: IRoutePath = {}, locationStrategy: ILocationStrategy): IRoutePath {\n    return locationStrategy.resolve(url, target);\n}\n\nexport function resolveStrategyPath_(url: string, target: IRoutePath = {}): IRoutePath {\n    let path: string = '';\n    let query: string = '';\n    let hash: string = '';\n    const regExp: RegExp = /^([^\\?|\\#]*)?(\\?[^\\#]*)?(\\#[^\\#]*?)?$/gm;\n    const matches = url.matchAll(regExp);\n    for (let match of matches) {\n        const g1 = match[1];\n        const g2 = match[2];\n        const g3 = match[3];\n        if (g1) {\n            path = g1;\n        }\n        if (g2) {\n            query = g2;\n        }\n        if (g3) {\n            hash = g3;\n        }\n    }\n    target.path = path;\n    target.query = query;\n    target.hash = hash.substring(1, hash.length);\n    target.search = query.substring(1, query.length);\n    // let search: string = target.search = query.substring(1, query.length);\n    // const path: string = target.path = url.split('?')[0];\n    // const query: string = target.query = url.substring(path.length, url.length);\n    // const search: string = target.search = query.split('#')[0];\n    // const hash: string = target.hash = query.substring(search.length, query.length);\n    target.segments = path.split('/').filter(x => x !== '');\n    target.params = {};\n    // console.log('resolvePath_', url, path, query, target.search, hash, target.segments, target.params);\n    return target;\n}\nexport function resolveStrategyHash_(url: string, target: IRoutePath = {}): IRoutePath {\n    let path: string = '';\n    let query: string = '';\n    let hash: string = '';\n    const regExp: RegExp = /^(\\/)?(\\?[^\\#]*)?(\\#.*)$/gm;\n    const matches = url.matchAll(regExp);\n    for (let match of matches) {\n        const g1 = match[1];\n        const g2 = match[2];\n        const g3 = match[3];\n        if (g1) {\n            path = g1;\n        }\n        if (g2) {\n            query = g2;\n        }\n        if (g3) {\n            hash = g3;\n        }\n    }\n    target.path = path;\n    target.query = query;\n    target.hash = hash.substring(1, hash.length);\n    target.search = query.substring(1, query.length);\n    // let search: string = target.search = query.substring(1, query.length);\n    // const path: string = target.path = url.split('?')[0];\n    // const query: string = target.query = url.substring(path.length, url.length);\n    // const search: string = target.search = query.split('#')[0];\n    // const hash: string = target.hash = query.substring(search.length, query.length);\n    target.segments = hash.split('/').filter(x => x !== '');\n    target.params = {};\n    // console.log('resolvePath_', url, path, query, search, hash, segments, params);\n    return target;\n}\n*/\n\nexport function resolveParams_(path: string, routeSegments: RouteSegment[]): { [key: string]: any } {\n    const segments: string[] = path.split('/').filter(x => x !== '');\n    const params: RouterKeyValue = {};\n    routeSegments.forEach((segment: RouteSegment, index: number) => {\n        // console.log('segment.params', segment.params);\n        const keys: string[] = Object.keys(segment.params);\n        if (keys.length) {\n            params[keys[0]] = decodeParams_(segments[index]);\n        }\n    });\n    return params;\n}\nexport function decodeParams_(encoded: string | null = null): any | null {\n    let decoded: any | null = encoded;\n    if (encoded) {\n        if (encoded.indexOf(';') === 0) {\n            try {\n                const json = window.atob(encoded.substring(1, encoded.length));\n                // const json = encoded;\n                decoded = JSON.parse(json);\n            } catch (error) {\n                // console.log('decodeParam_.error', error);\n                decoded = encoded;\n            }\n        } else if (Number(encoded).toString() === encoded) {\n            decoded = Number(encoded);\n        }\n    }\n    return decoded;\n}\nexport function encodeParams_(value: any): string | null {\n    let encoded: string | null = null;\n    try {\n        if (typeof value === 'object') {\n            const json = JSON.stringify(value);\n            encoded = ';' + window.btoa(json);\n            // encoded = json;\n        } else if (typeof value === 'number') {\n            encoded = value.toString();\n        }\n    } catch (error) {\n        console.log('encodeParam__.error', error);\n    }\n    return encoded;\n}\nexport function decodeSegment_(s: string): string {\n    return decodeString_(s.replace(/%28/g, '(').replace(/%29/g, ')').replace(/\\&/gi, '%26'));\n}\nexport function encodeSegment_(s: string): string {\n    return encodeString_(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\nexport function decodeString_(s: string): string {\n    return decodeURIComponent(s.replace(/\\@/g, '%40').replace(/\\:/gi, '%3A').replace(/\\$/g, '%24').replace(/\\,/gi, '%2C'));\n}\nexport function encodeString_(s: string): string {\n    return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n/*\nexport function encodeParams_(params: RouterKeyValue): string {\n    // !!! array?\n    return Object.keys(params).map(key => `;${encodeSegment_(key)}=${typeof params[key] === 'string' ? encodeSegment_(params[key] as string) : encodeParams_(params[key] as RouterKeyValue)}`).join('');\n}\nexport function decodeParams_(encodedParams: string): RouterKeyValue {\n    const params: RouterKeyValue = {} as RouterKeyValue;\n    const keyValues = encodedParams.split(';');\n    keyValues.forEach((x: string) => {\n        const kvs: string[] = x.split('=');\n        if (kvs.length === 2) {\n            params[kvs[0]] = kvs[1];\n        }\n    });\n    return params;\n}\nexport function resolvePath___(url: string, routeSegments: RouteSegment[]): { path: string, search: string, hash: string, segments: any[] } {\n    // console.log('resolvePath_.resolvedRoute.routeSegments', routeSegments);\n    const path: string = url.split('?')[0];\n    const query: string = url.substring(path.length, url.length);\n    const search: string = query.split('#')[0];\n    const hash: string = query.substring(search.length, query.length);\n    const segments: string[] = path.split('/').filter(x => x !== '');\n    const params: RouterKeyValue = {};\n    routeSegments.forEach((segment: RouteSegment, index: number) => {\n        // console.log('segment.params', segment.params);\n        const keys: string[] = Object.keys(segment.params);\n        if (keys.length) {\n            params[keys[0]] = decodeParams_(segments[index]);\n        }\n    });\n    return { path, search, hash, segments };\n}\n*/","import { Component, Factory } from 'rxcomp';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { RouteComponent, RouterKeyValue } from '../router.types';\nimport { IBaseRoute, Route } from './route';\nimport { RouteSegment } from './route-segment';\n\nexport class RouteSnapshot implements IBaseRoute {\n    path!: string;\n    pathMatch: 'prefix' | 'full' = 'prefix';\n    component!: typeof Component; // import !!!\n    redirectTo?: string;\n    segments!: RouteSegment[];\n    relative: boolean = true;\n    children?: Route[];\n    childRoute?: RouteSnapshot;\n    parent?: RouteSnapshot | undefined;\n    initialUrl?: string;\n    urlAfterRedirects?: string;\n    extractedUrl?: string;\n    remainUrl?: string;\n    data!: RouterKeyValue;\n    params!: RouterKeyValue;\n    queryParams!: RouterKeyValue;\n    data$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    params$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    queryParams$: ReplaySubject<RouterKeyValue> = new ReplaySubject<RouterKeyValue>(1);\n    canDeactivate: ((component: Factory, currentRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canLoad: ((route: RouteSnapshot, segments: RouteSegment[]) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivate: ((route: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    canActivateChild: ((childRoute: RouteSnapshot) => Observable<boolean | RouteComponent[]>)[] = [];\n    instance?: Component;\n    constructor(options?: IBaseRoute) {\n        if (options) {\n            Object.assign(this, options);\n        }\n        this.data$.next(this.data);\n        this.params$.next(this.params);\n        this.queryParams$.next(this.queryParams);\n    }\n    next(snapshot: RouteSnapshot): void {\n        this.childRoute = snapshot.childRoute;\n        if (snapshot.childRoute) {\n            snapshot.childRoute.parent = this;\n        }\n        const data = this.data = Object.assign({}, snapshot.data);\n        this.data$.next(data);\n        const params = this.params = Object.assign({}, snapshot.params);\n        this.params$.next(params);\n        const queryParams = this.queryParams = Object.assign({}, snapshot.queryParams);\n        this.queryParams$.next(queryParams);\n    }\n}","import { Route } from '../route/route';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport { RouteComponent, RouterLink } from '../router.types';\n\nexport interface IRouterEvent {\n    id?: number;\n    routerLink?: RouterLink;\n    url?: string; // The target URL passed into the `Router#navigateByUrl()` call before navigation. This is the value before the router has parsed or applied redirects to it.\n    initialUrl?: any; // string | UrlTree; // The initial target URL after being parsed with `UrlSerializer.extract()`.\n    urlAfterRedirects?: string;\n    extractedUrl?: any; // UrlTree; // The extracted URL after redirects have been applied.\n    remainUrl?: string;\n    finalUrl?: any; // UrlTree;\n    trigger?: 'imperative' | 'popstate' | 'hashchange';\n    extras?: any; // NavigationExtras;\n    previousNavigation?: IRouterEvent | null;\n    route?: Route | RouteSnapshot;\n    reason?: string;\n    redirectTo?: RouteComponent[];\n    error?: any;\n}\nexport class RouterEvent implements IRouterEvent {\n    url!: string;\n    routerLink!: RouterLink;\n    trigger!: 'imperative' | 'popstate' | 'hashchange';\n    constructor(options?: IRouterEvent) {\n        if (options) {\n            Object.assign(this, options);\n        }\n        if (this.routerLink) {\n            this.url = Array.isArray(this.routerLink) ? this.routerLink.join('') : this.routerLink;\n        }\n    }\n}\n// An event triggered when navigation starts.\nexport class NavigationStart extends RouterEvent {\n    navigationTrigger!: 'imperative' | 'popstate' | 'hashchange';\n    restoredState?: { [key: string]: any };\n}\n// An event triggered when the Router parses the URL and the routes are recognized.\nexport class RoutesRecognized extends RouterEvent {\n    route!: RouteSnapshot; // ???\n    // state!: RouterStateSnapshot;\n}\n// An event triggered at the start of the Guard phase of routing.\nexport class GuardsCheckStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the start of the child-activation part of the Resolve phase of routing.\nexport class ChildActivationStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the start of the activation part of the Resolve phase of routing.\nexport class ActivationStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the Guard phase of routing.\nexport class GuardsCheckEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the the start of the Resolve phase of routing.\nexport class ResolveStart extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the Resolve phase of routing.\nexport class ResolveEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the activation part of the Resolve phase of routing.\nexport class ActivationEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered at the end of the child-activation part of the Resolve phase of routing.\nexport class ChildActivationEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered before the Router lazy loads a route configuration.\nexport class RouteConfigLoadStart extends RouterEvent {\n    route!: RouteSnapshot;\n    urlAfterRedirects!: string;\n}\n// An event triggered after a route has been lazy loaded.\nexport class RouteConfigLoadEnd extends RouterEvent {\n    route!: RouteSnapshot;\n}\n// An event triggered when navigation ends successfully.\nexport class NavigationEnd extends RouterEvent {\n    urlAfterRedirects!: string;\n    route!: RouteSnapshot;\n}\n// An event triggered when navigation is canceled. This is due to a Route Guard returning false during navigation.\nexport class NavigationCancel extends RouterEvent {\n    reason!: string;\n    redirectTo?: RouteComponent[];\n}\n// An event triggered when navigation fails due to an unexpected error.\nexport class NavigationError extends RouterEvent {\n    error!: any;\n}\n\n/*\nNavigationStart {id: 1, url: '/test-a', navigationTrigger: 'imperative', restoredState: null, constructor: Object}\nRoutesRecognized {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nGuardsCheckStart {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nChildActivationStart {snapshot: ActivatedRouteSnapshot, constructor: Object}\nActivationStart {snapshot: ActivatedRouteSnapshot, constructor: Object}\nGuardsCheckEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, shouldActivate: true…}\nResolveStart {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nResolveEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', state: RouterStateSnapshot, constructor: Object}\nActivationEnd {snapshot: ActivatedRouteSnapshot, constructor: Object}\nChildActivationEnd {snapshot: ActivatedRouteSnapshot, constructor: Object}\nNavigationEnd {id: 1, url: '/test-a', urlAfterRedirects: '/test-a', constructor: Object}\nScroll {routerEvent: NavigationEnd, position: null, anchor: null, constructor: Object}\n*/","import { combineLatest, fromEvent, merge, Observable, of, ReplaySubject } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { ILocationStrategy, LocationStrategy, LocationStrategyPath } from '../location/location.strategy';\nimport { INavigationExtras, IRoute, IRoutes, Route, Routes } from '../route/route';\nimport { RoutePath } from '../route/route-path';\nimport { RouteSegment } from '../route/route-segment';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport { RouteComponent, RouterKeyValue, RouterLink } from '../router.types';\nimport { ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, GuardsCheckEnd, GuardsCheckStart, IRouterEvent, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized } from './router-events';\n\n// !!! todo: hash navigation strategy\n\nexport default class RouterService {\n    static routes: Routes = [];\n    static route$: ReplaySubject<RouteSnapshot> = new ReplaySubject<RouteSnapshot>(1);\n    static events$: ReplaySubject<RouterEvent> = new ReplaySubject<RouterEvent>(1);\n    static observe$: Observable<RouterEvent>;\n    static get flatRoutes(): Routes {\n        return getFlatRoutes_(this.routes);\n    }\n    static setRoutes(routes: IRoutes): RouterService {\n        this.routes = routes.map((x: IRoute) => new Route(x));\n        this.observe$ = makeObserve$_(this.routes, this.route$, this.events$, this.locationStrategy);\n        return this;\n    }\n    static setRouterLink(routerLink: RouterLink, extras: INavigationExtras = { skipLocationChange: false }): void {\n        // ['/hero', hero.id];\n        this.events$.next(new NavigationStart({ routerLink, trigger: 'imperative' }));\n    }\n    static navigate(routerLink: RouterLink, extras: INavigationExtras = { skipLocationChange: false }): void {\n        // navigate(['items'], { relativeTo: this.route });\n        // navigate(['/heroes', { id: heroId }]);\n        this.events$.next(new NavigationStart({ routerLink, trigger: 'imperative' }));\n    }\n    static findRoute(routerLink: RouterLink): Route | null {\n        const initialUrl: string = this.locationStrategy.serializeLink(routerLink);\n        return this.findRouteByUrl(initialUrl);\n    }\n    static findRouteByUrl(initialUrl: string): Route | null {\n        const routes: Routes = getFlatRoutes_(this.routes);\n        let resolvedRoute: Route | null = routes.find(route => initialUrl.match(route.matcher)) || null;\n        let urlAfterRedirects: string = initialUrl;\n        if (resolvedRoute && resolvedRoute.redirectTo) {\n            urlAfterRedirects = resolvedRoute.redirectTo;\n            resolvedRoute = this.findRouteByUrl(urlAfterRedirects);\n        }\n        return resolvedRoute;\n    }\n    static getPath(routerLink: RouterLink = []): RoutePath {\n        const lastPath: string = (Array.isArray(routerLink) ? routerLink : [routerLink]).map(x => {\n            return typeof x === 'string' ? x : this.locationStrategy.encodeParams(x);\n        }).join('/');\n        const segments: RouteSegment[] = [];\n        const routes: (Route | RouteSnapshot)[] = [];\n        const route: Route | null = this.findRouteByUrl(lastPath);\n        if (route) {\n            let r: Route | RouteSnapshot | undefined | null = route?.parent;\n            while (r) {\n                segments.unshift.apply(segments, r.segments);\n                routes.unshift(r instanceof RouteSnapshot ? r : r.snapshot || r);\n                r = r.parent;\n            }\n            segments.push.apply(segments, route?.segments || []);\n            routes.push({ path: lastPath } as any);\n        }\n        let initialUrl: string = routes.map(r => r instanceof RouteSnapshot ? r.extractedUrl : r.path).join('/');\n        initialUrl = this.locationStrategy.getPath(initialUrl);\n        // console.log('RouterService.getPath', initialUrl);\n        const routePath: RoutePath = new RoutePath(initialUrl, segments, route || undefined, this.locationStrategy);\n        return routePath;\n    }\n    private static locationStrategy_: ILocationStrategy;\n    static get locationStrategy(): ILocationStrategy {\n        if (this.locationStrategy_) {\n            return this.locationStrategy_;\n        } else {\n            return this.locationStrategy_ = new LocationStrategyPath();\n        }\n    }\n    static useLocationStrategy(locationStrategyType: typeof LocationStrategy): void {\n        this.locationStrategy_ = new locationStrategyType();\n    }\n}\n/*\nfunction setHistory_(locationStrategy: ILocationStrategy, url: string, params?: URLSearchParams, popped?: boolean): void {\n    if (isPlatformBrowser && window.history && window.history.pushState) {\n        const title = document.title;\n        url = locationStrategy.getUrl(url, params);\n        // !!!\n        // const state = params ? params.toString() : '';\n        // console.log(state);\n        if (popped) {\n            window.history.replaceState(undefined, title, url);\n        } else {\n            window.history.pushState(undefined, title, url);\n        }\n    }\n}\n*/\nfunction getFlatRoutes_(routes: Routes): Routes {\n    const reduceRoutes: (routes: Route[]) => Route[] = (routes: Route[]): Route[] => {\n        return routes.reduce<Routes>((p: Route[], c: Route) => {\n            p.push(c);\n            p.push.apply(p, reduceRoutes(c.children || []));\n            return p;\n        }, []);\n    }\n    return reduceRoutes(routes);\n}\nfunction getFlatSnapshots_(currentSnapshot: RouteSnapshot): RouteSnapshot[] {\n    let snapshots: RouteSnapshot[] = [currentSnapshot];\n    let childRoute: RouteSnapshot | undefined = currentSnapshot.childRoute;\n    while (childRoute) {\n        snapshots.push(childRoute)\n        childRoute = childRoute.childRoute;\n    }\n    return snapshots;\n}\nfunction clearRoutes_(routes: Routes, currentSnapshot: RouteSnapshot): void {\n    let snapshots: RouteSnapshot[] = getFlatSnapshots_(currentSnapshot);\n    const flatRoutes: Routes = getFlatRoutes_(routes);\n    flatRoutes.forEach((route: Route) => {\n        if (route.snapshot && snapshots.indexOf(route.snapshot) === -1) {\n            route.snapshot = undefined;\n        }\n    });\n}\nfunction resolveRoutes_(routes: Routes, childRoutes: Routes, initialUrl: string): RouteSnapshot | undefined {\n    let resolvedRoute: RouteSnapshot | undefined;\n    for (let route of childRoutes) {\n        resolvedRoute = resolveRoute_(routes, route, initialUrl);\n        if (resolvedRoute) {\n            return resolvedRoute;\n        }\n    }\n    return resolvedRoute;\n    // return childRoutes.reduce<RouteSnapshot | undefined>((p, route) => p || resolveRoute_(routes, route, initialUrl), undefined);\n}\nfunction resolveRoute_(routes: Routes, route: Route, initialUrl: string): RouteSnapshot | undefined {\n    // console.log('resolveRoute_', initialUrl);\n    let urlAfterRedirects!: string;\n    let extractedUrl: string = '';\n    let remainUrl: string = initialUrl;\n    const match: RegExpMatchArray | null = initialUrl.match(route.matcher);\n    // console.log(route.matcher, match?.length, initialUrl, '=>', route.path);\n    if (!match) {\n        return undefined;\n    }\n    if (route.redirectTo) {\n        // console.log('match', initialUrl, '=>', route.redirectTo, match);\n        return resolveRoutes_(routes, routes, route.redirectTo);\n    }/* else {\n        // console.log('match', initialUrl, match);\n    }*/\n    extractedUrl = match[0];\n    remainUrl = initialUrl.substring(match[0].length, initialUrl.length);\n    const routePath: RoutePath = new RoutePath(extractedUrl, route.segments, undefined, RouterService.locationStrategy);\n    let params: RouterKeyValue = routePath.params;\n    const snapshot: RouteSnapshot = new RouteSnapshot({ ...route, initialUrl, urlAfterRedirects, extractedUrl, remainUrl, params });\n    route.snapshot = snapshot;\n    if (route.children?.length && remainUrl.length) {\n        const childRoute: RouteSnapshot | undefined = resolveRoutes_(routes, route.children, remainUrl);\n        snapshot.childRoute = childRoute;\n        if (childRoute) {\n            childRoute.parent = snapshot;\n        }\n    }\n    // console.log('RouteSnapshot', snapshot.path, snapshot.extractedUrl, snapshot.remainUrl);\n    return snapshot;\n}\nfunction makeActivatorResponse$_(event: RouterEvent, activators: Observable<boolean | RouteComponent[]>[]): Observable<RouterEvent> {\n    // console.log('makeActivatorResponse$_', event);\n    return combineLatest(...activators).pipe(\n        map((values: (boolean | RouteComponent[])[]) => {\n            const canActivate: boolean | RouteComponent[] = values.reduce<boolean | RouteComponent[]>((p: boolean | RouteComponent[], c: boolean | RouteComponent[]) => {\n                return p === true ? (c === true ? true : c) : p;\n            }, true);\n            if (canActivate === true) {\n                return event;\n            } else {\n                const cancelEvent: IRouterEvent = { ...event, reason: 'An activation guard has dismissed navigation to the route.' };\n                if (canActivate !== false) {\n                    cancelEvent.redirectTo = canActivate;\n                }\n                return new NavigationCancel(cancelEvent);\n            }\n        })\n    );\n}\nfunction makeCanDeactivateResponse$_(events$: ReplaySubject<RouterEvent>, event: GuardsCheckStart, currentRoute?: RouteSnapshot): Observable<RouterEvent> {\n    // console.log('makeCanDeactivateResponse$_', event);\n    if (event.route.canDeactivate && event.route.canDeactivate.length && currentRoute?.instance) {\n        const route: RouteSnapshot = event.route;\n        return makeActivatorResponse$_(event, route.canDeactivate.map(x => x(currentRoute.instance!, currentRoute)));\n    } else {\n        return of(event);\n    }\n}\nfunction makeCanLoadResponse$_(events$: ReplaySubject<RouterEvent>, event: GuardsCheckStart): Observable<RouterEvent> {\n    // console.log('makeCanLoadResponse$_', event);\n    if (event.route.canLoad && event.route.canLoad.length) {\n        const route: RouteSnapshot = event.route;\n        return makeActivatorResponse$_(event, route.canLoad.map(x => x(route, route.segments)));\n    } else {\n        return of(event);\n    }\n}\nfunction makeCanActivateChildResponse$_(events$: ReplaySubject<RouterEvent>, event: GuardsCheckStart): Observable<RouterEvent> {\n    // console.log('makeCanActivateChildResponse$_', event, event.route.childRoute);\n    const reduceChildRouteActivators_ = (route: RouteSnapshot, activators: Observable<boolean | RouteComponent[]>[]): Observable<boolean | RouteComponent[]>[] => {\n        // console.log('reduceChildRouteActivators_', route.canActivateChild, route.childRoute);\n        while (route != null && route.canActivateChild && route.canActivateChild.length && route.childRoute) {\n            const routeActivators: Observable<boolean | RouteComponent[]>[] = route.canActivateChild.map(x => x(route.childRoute!));\n            Array.prototype.push.apply(activators, routeActivators);\n            route = route.childRoute;\n        }\n        return activators;\n    }\n    const activators: Observable<boolean | RouteComponent[]>[] = reduceChildRouteActivators_(event.route, []);\n    // console.log('makeCanActivateChildResponse$_', activators);\n    if (activators.length) {\n        return makeActivatorResponse$_(event, activators);\n    } else {\n        return of(event);\n    }\n}\nfunction makeCanActivateResponse$_(events$: ReplaySubject<RouterEvent>, event: ChildActivationStart): Observable<RouterEvent> {\n    // console.log('makeCanActivateResponse$_', event);\n    if (event.route.canActivate && event.route.canActivate.length) {\n        const route: RouteSnapshot = event.route;\n        return makeActivatorResponse$_(event, route.canActivate.map(x => x(route)));\n    } else {\n        return of(event);\n    }\n}\nfunction makeObserve$_(routes: Routes, route$: ReplaySubject<RouteSnapshot>, events$: ReplaySubject<RouterEvent>, locationStrategy: ILocationStrategy): Observable<RouterEvent> {\n    let currentRoute: RouteSnapshot | undefined;\n    const stateEvents$ = merge(fromEvent<PopStateEvent>(window, 'popstate')).pipe(\n        /*\n        tap((event: PopStateEvent) => {\n            // console.log('location', document.location.pathname, 'state', event.state);\n        }),\n        */\n        map(event => new NavigationStart({ routerLink: document.location.pathname, trigger: 'popstate' })),\n        shareReplay(1),\n    );\n    return merge(stateEvents$, events$).pipe(\n        switchMap((event: RouterEvent) => {\n            if (event instanceof GuardsCheckStart) {\n                return makeCanDeactivateResponse$_(events$, event, currentRoute).pipe(\n                    switchMap((nextEvent: RouterEvent) => {\n                        if (nextEvent instanceof NavigationCancel) {\n                            return of(nextEvent);\n                        } else {\n                            return makeCanLoadResponse$_(events$, event).pipe(\n                                switchMap((nextEvent: RouterEvent) => {\n                                    if (nextEvent instanceof NavigationCancel) {\n                                        return of(nextEvent);\n                                    } else {\n                                        return makeCanActivateChildResponse$_(events$, event);\n                                    }\n                                }),\n                            );\n                        }\n                    }),\n                );\n            } else if (event instanceof ChildActivationStart) {\n                return makeCanActivateResponse$_(events$, event);\n            } else {\n                return of(event);\n            }\n        }),\n        tap((event: RouterEvent) => {\n            if (event instanceof NavigationStart) {\n                // console.log('NavigationStart', event.routerLink);\n                const routerLink = event.routerLink;\n                // console.log('routerLink', routerLink);\n                let snapshot: RouteSnapshot | undefined;\n                let initialUrl: string;\n                const routePath: RoutePath = RouterService.getPath(routerLink);\n                // console.log(routePath, routePath.url);\n                initialUrl = routePath.url;\n                // console.log('initialUrl', initialUrl);\n                const isRelative: boolean = initialUrl.indexOf('/') !== 0;\n                if (isRelative && currentRoute && currentRoute.children?.length) {\n                    snapshot = resolveRoutes_(routes, currentRoute.children, initialUrl);\n                    if (snapshot) {\n                        currentRoute.childRoute = snapshot;\n                        snapshot.parent = currentRoute;\n                        snapshot = currentRoute;\n                    }\n                    // console.log('relative', currentRoute, snapshot, initialUrl);\n                } else {\n                    snapshot = resolveRoutes_(routes, routes, initialUrl);\n                    // console.log('absolute');\n                }\n                if (snapshot) {\n                    // console.log(routes);\n                    currentRoute = snapshot;\n                    events$.next(new RoutesRecognized({ ...event, route: snapshot }));\n                } else {\n                    events$.next(new NavigationError({ ...event, error: new Error('unknown route') }));\n                }\n            } else if (event instanceof RoutesRecognized) {\n                // console.log('RoutesRecognized', event);\n                events$.next(new GuardsCheckStart({ ...event }));\n            } else if (event instanceof GuardsCheckStart) {\n                // console.log('GuardsCheckStart', event);\n                events$.next(new ChildActivationStart({ ...event }));\n            } else if (event instanceof ChildActivationStart) {\n                // console.log('ChildActivationStart', event);\n                events$.next(new ActivationStart({ ...event }));\n            } else if (event instanceof ActivationStart) {\n                // console.log('ActivationStart', event);\n                events$.next(new GuardsCheckEnd({ ...event }));\n            } else if (event instanceof GuardsCheckEnd) {\n                // console.log('GuardsCheckEnd', event);\n                events$.next(new ResolveStart({ ...event }));\n            } else if (event instanceof ResolveStart) {\n                // console.log('ResolveStart', event);\n                events$.next(new ResolveEnd({ ...event }));\n            } else if (event instanceof ResolveEnd) {\n                // console.log('ResolveEnd', event);\n                events$.next(new ActivationEnd({ ...event }));\n            } else if (event instanceof ActivationEnd) {\n                // console.log('ActivationEnd', event);\n                events$.next(new ChildActivationEnd({ ...event }));\n            } else if (event instanceof ChildActivationEnd) {\n                // console.log('ChildActivationEnd', event);\n                events$.next(new RouteConfigLoadStart({ ...event }));\n            } else if (event instanceof RouteConfigLoadStart) {\n                // console.log('RouteConfigLoadStart', event);\n                events$.next(new RouteConfigLoadEnd({ ...event }));\n            } else if (event instanceof RouteConfigLoadEnd) {\n                // console.log('RouteConfigLoadEnd', event);\n                events$.next(new NavigationEnd({ ...event }));\n            } else if (event instanceof NavigationEnd) {\n                const segments: string[] = [];\n                let source: RouteSnapshot | undefined = event.route;\n                while (source != null) {\n                    // console.log(source.params, source.data);\n                    if (source.extractedUrl?.length) {\n                        segments.push(source.extractedUrl);\n                    }\n                    if (source.childRoute) {\n                        source = source.childRoute;\n                    } else {\n                        if (source.remainUrl?.length) {\n                            segments[segments.length - 1] = segments[segments.length - 1] + source.remainUrl;\n                        }\n                        source = undefined;\n                    }\n                }\n                const extractedUrl: string = segments.join('/').replace(/\\/\\//g, '/');\n                console.log('NavigationEnd', event);\n                clearRoutes_(routes, event.route);\n                locationStrategy.setHistory(extractedUrl, undefined, event.trigger === 'popstate');\n                // setHistory_(locationStrategy, extractedUrl, undefined, event.trigger === 'popstate');\n                route$.next(event.route);\n            } else if (event instanceof NavigationCancel) {\n                console.log('NavigationCancel', event);\n                if (event.redirectTo) {\n                    events$.next(new NavigationStart({ routerLink: event.redirectTo, trigger: 'imperative' }));\n                }\n            } else if (event instanceof NavigationError) {\n                console.log('NavigationError', event);\n            }\n        }),\n        catchError((error: Error) => of(new NavigationError({ ...event, error }))),\n        shareReplay(1),\n    );\n}\n","import { Directive, getContext, IFactoryMeta } from 'rxcomp';\nimport { fromEvent, Observable } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { INavigationExtras } from '../route/route';\nimport { RoutePath } from '../route/route-path';\nimport { RouteSegment } from '../route/route-segment';\nimport { RouteComponent, RouterLink } from '../router.types';\nimport RouterService from './router.service';\n\nexport default class RouterLinkDirective extends Directive {\n    path!: RoutePath;\n    segments!: RouteSegment[];\n    private routerLink_!: RouteComponent[];\n    get routerLink(): RouterLink {\n        return this.routerLink_;\n    }\n    set routerLink(routerLink: RouterLink) {\n        this.routerLink_ = Array.isArray(routerLink) ? routerLink : [routerLink];\n        this.segments = this.getSegments(this.routerLink_);\n    }\n\n    getSegments(routerLink: RouteComponent[]): RouteSegment[] {\n        // console.log('RouterLinkDirective.getSegments', routerLink);\n        const segments: RouteSegment[] = [];\n        routerLink.forEach(item => {\n            if (typeof item === 'string') {\n                const regExp: RegExp = /([^:]+)|\\:([^\\/]+)/g;\n                const matches = item.matchAll(regExp);\n                const components = [];\n                for (let match of matches) {\n                    const g1 = match[1];\n                    const g2 = match[2];\n                    if (g1) {\n                        components.push(g1);\n                    } else if (g2) {\n                        const param: { [key: string]: any } = {};\n                        param[g2] = null;\n                        components.push(param);\n                    }\n                }\n            } else {\n                segments.push(new RouteSegment('', {}));\n            }\n        });\n        return segments;\n    }\n\n    onInit() {\n        const { node } = getContext(this);\n        const event$: Observable<Event> = fromEvent<Event>(node, 'click').pipe(shareReplay(1));\n        event$.pipe(\n            takeUntil(this.unsubscribe$)\n        ).subscribe(event => {\n            // console.log('RouterLinkDirective', event, this.routerLink);\n            // !!! skipLocationChange\n            const navigationExtras: INavigationExtras = {\n                skipLocationChange: this.skipLocationChange,\n                replaceUrl: this.replaceUrl,\n                state: this.state,\n            };\n            RouterService.setRouterLink(this.routerLink, navigationExtras);\n            event.preventDefault();\n            return false;\n        });\n    }\n\n    onChanges() {\n        const { node } = getContext(this);\n        const routePath: RoutePath = RouterService.getPath(this.routerLink_);\n        // console.log('RouterLinkDirective.routePath', routePath);\n        node.setAttribute('href', routePath.url);\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[routerLink],[[routerLink]]',\n        inputs: ['routerLink'],\n    };\n}\n\n/*\nget urlTree(): UrlTree {\n    return RouterService.createUrlTree(this.routerLink, {\n        relativeTo: this.route,\n        queryParams: this.queryParams,\n        fragment: this.fragment,\n        preserveQueryParams: this.preserve,\n        queryParamsHandling: this.queryParamsHandling,\n        preserveFragment: this.preserveFragment,\n    });\n}\n*/\n","import { Directive, getContext, IFactoryMeta } from 'rxcomp';\nimport { RoutePath } from '../route/route-path';\nimport RouterLinkDirective from './router-link.directive';\nimport RouterService from './router.service';\n\nexport default class RouterLinkActiveDirective extends Directive {\n    routerLinkActive!: { [key: string]: string } | string;\n    keys: string[] = [];\n    onChanges() {\n        // console.log('RouterLinkActive.onChanges');\n        const { node } = getContext(this);\n        node.classList.remove.apply(node.classList, this.keys);\n        let keys: string[] = [];\n        const active = this.isActive();\n        if (active) {\n            const object = this.routerLinkActive;\n            if (typeof object === 'object') {\n                for (let key in object) {\n                    if (object[key]) {\n                        keys.push(key);\n                    }\n                }\n            } else if (typeof object === 'string') {\n                keys = object.split(' ').filter(x => x.length);\n            }\n        }\n        node.classList.add.apply(node.classList, keys);\n        this.keys = keys;\n        // console.log('RouterLinkActive.onChanges', active, keys);\n    }\n    isActive(): boolean {\n        const path: RoutePath = RouterService.getPath(this.host.routerLink);\n        const isActive: boolean = path.route?.snapshot != null;\n        // console.log('RouterLinkActive.isActive', isActive);\n        return isActive;\n    }\n    static meta: IFactoryMeta = {\n        selector: '[routerLinkActive],[[routerLinkActive]]',\n        hosts: { host: RouterLinkDirective },\n        inputs: ['routerLinkActive'],\n    };\n}\n","import { Component, Factory, getContext, IComment, IElement, IFactoryMeta, Structure } from 'rxcomp';\nimport { isObservable, Observable, Observer, of, ReplaySubject, Subscription } from 'rxjs';\nimport { filter, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport View from '../core/view';\nimport { isPromise } from '../route/route-activators';\nimport { RouteSnapshot } from '../route/route-snapshot';\nimport RouterService from './router.service';\n\nexport default class RouterOutletStructure extends Structure {\n    private route$_: ReplaySubject<RouteSnapshot | undefined> = new ReplaySubject<RouteSnapshot | undefined>(1);\n    private route_?: RouteSnapshot;\n    private factory_?: typeof Component;\n    get route(): RouteSnapshot | undefined {\n        return this.route_;\n    }\n    host?: RouterOutletStructure;\n    outlet!: IComment;\n    element?: IElement;\n    instance?: Component;\n    onInit() {\n        this.route$().pipe(\n            switchMap(snapshot => this.factory$(snapshot)),\n            takeUntil(this.unsubscribe$)\n        ).subscribe(() => {\n            // console.log(`RouterOutletStructure ActivatedRoutes: [\"${RouterService.flatRoutes.filter(x => x.snapshot).map(x => x.snapshot?.extractedUrl).join('\", \"')}\"]`);\n        });\n        if (this.host) {\n            this.route$_.next(this.host.route?.childRoute);\n        }\n    }\n    onChanges() {\n        if (this.host) {\n            this.route$_.next(this.host.route?.childRoute);\n        }\n    }\n    route$(): Observable<RouteSnapshot | undefined> {\n        const source: Observable<RouteSnapshot | undefined> = this.host ? this.route$_ : RouterService.route$;\n        return source.pipe(\n            filter((snapshot: RouteSnapshot | undefined) => {\n                this.route_ = snapshot; // !!!\n                if (this.snapshot_ && snapshot && this.snapshot_.component === snapshot.component) {\n                    this.snapshot_.next(snapshot);\n                    return false;\n                } else {\n                    this.snapshot_ = snapshot;\n                    return true;\n                }\n            }),\n        );\n    }\n    factory$(snapshot: RouteSnapshot | undefined): Observable<boolean> {\n        const { module, node } = getContext(this);\n        const factory: typeof Component | undefined = snapshot?.component;\n        if (this.factory_ !== factory) {\n            this.factory_ = factory;\n            return this.onExit$_(this.element, this.instance).pipe(\n                tap(() => {\n                    if (this.element) {\n                        this.element.parentNode!.removeChild(this.element);\n                        module.remove(this.element, this);\n                        this.element = undefined;\n                        this.instance = undefined;\n                    }\n                }),\n                switchMap(() => {\n                    if (snapshot && factory && factory.meta.template) {\n                        let element: IElement = document.createElement('div');\n                        element.innerHTML = factory.meta.template;\n                        if (element.children.length === 1) {\n                            element = element.firstElementChild as IElement;\n                        }\n                        node.appendChild(element);\n                        const instance: Factory | undefined = module.makeInstance(element, factory, factory.meta.selector!, this);\n                        module.compile(element, instance);\n                        this.instance = instance;\n                        this.element = element;\n                        snapshot.instance = instance;\n                        return this.onEnter$_(element, instance);\n                    } else {\n                        return of(false);\n                    }\n                })\n            );\n        } else {\n            return of(false);\n        }\n    }\n    private onEnter$_(element?: IElement, instance?: Component): Observable<boolean> {\n        if (element && instance && instance instanceof View) {\n            return asObservable_([element], instance.onEnter);\n        } else {\n            return of(true);\n        }\n    }\n    private onExit$_(element?: IElement, instance?: Component): Observable<boolean> {\n        if (element && instance && instance instanceof View) {\n            return asObservable_([element], instance.onExit);\n        } else {\n            return of(true);\n        }\n    }\n    static meta: IFactoryMeta = {\n        selector: 'router-outlet,[router-outlet]',\n        hosts: { host: RouterOutletStructure },\n    };\n}\n\nfunction asObservable_<T>(args: any[], callback: (...args: any[]) => Observable<T> | Promise<T> | (() => T) | T): Observable<T> {\n    return Observable.create(function (observer: Observer<T>) {\n        let subscription: Subscription;\n        try {\n            let result: Observable<T> | Promise<T> | (() => T) | T = callback(...args);\n            if (isObservable(result)) {\n                subscription = result.subscribe(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (isPromise<T>(result)) {\n                (result as Promise<T>).then(result => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else if (typeof result === 'function') {\n                observer.next((result as (() => T))() as T);\n                observer.complete();\n            } else {\n                observer.next(result);\n                observer.complete();\n            }\n        } catch (error) {\n            observer.error(error);\n        }\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n    });\n}\n\n/*\nset route(route: RouteSnapshot | undefined) {\n    if (this.route_ && route && this.route_.component === route.component) {\n        this.route_.next(route);\n    } else {\n        this.route_ = route;\n        if (route) {\n            this.factory = route.component;\n            route.instance = this.instance;\n        } else {\n            this.factory = undefined;\n        }\n    }\n}\nget factory(): typeof Component | undefined {\n    return this.factory_;\n}\nset factory(factory: typeof Component | undefined) {\n    const { module, node } = getContext(this);\n    if (this.factory_ !== factory) {\n        this.factory_ = factory;\n        if (this.element) {\n            if (this.instance && this.instance instanceof View) {\n                asObservable_([this.element], this.instance.onExit);\n            }\n            this.element.parentNode!.removeChild(this.element);\n            module.remove(this.element, this);\n            this.element = undefined;\n            this.instance = undefined;\n        }\n        if (factory && factory.meta.template) {\n            let element: IElement = document.createElement('div');\n            element.innerHTML = factory.meta.template;\n            if (element.children.length === 1) {\n                element = element.firstElementChild as IElement;\n            }\n            node.appendChild(element);\n            const instance: Factory | undefined = module.makeInstance(element, factory, factory.meta.selector!, this);\n            module.compile(element, instance);\n            this.instance = instance;\n            this.element = element;\n        }\n    }\n}\n*/","import { Factory, IModuleMeta, Module, Pipe } from 'rxcomp';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { LocationStrategy } from './location/location.strategy';\nimport { IRoute } from './route/route';\nimport { NavigationCancel, NavigationEnd, NavigationError, RouterEvent } from './router/router-events';\nimport RouterLinkActiveDirective from './router/router-link-active.directive';\nimport RouterLinkDirective from './router/router-link.directive';\nimport RouterOutletStructure from './router/router-outlet.structure';\nimport RouterService from './router/router.service';\n\nconst factories: typeof Factory[] = [\n\tRouterOutletStructure,\n\tRouterLinkDirective,\n\tRouterLinkActiveDirective,\n];\n\nconst pipes: typeof Pipe[] = [\n];\n\n/**\n *  RouterModule Class.\n * @example\n * export default class AppModule extends Module {}\n *\n * AppModule.meta = {\n *  imports: [\n *   CoreModule,\n *   RouterModule.forRoot([\n *    { path: '', redirectTo: '/index', pathMatch: 'full' },\n *    { path: 'index', component: IndexComponent, data: { title: 'Index' } }\n *   ])\n *  ],\n *  declarations: [\n *   IndexComponent\n *  ],\n *  bootstrap: AppComponent,\n * };\n * @extends Module\n */\nexport default class RouterModule extends Module {\n\tconstructor() {\n\t\tsuper();\n\t\t// console.log('RouterModule');\n\t\tRouterService.observe$.pipe(\n\t\t\ttap((event: RouterEvent) => {\n\t\t\t\tif (event instanceof NavigationEnd\n\t\t\t\t\t|| event instanceof NavigationCancel\n\t\t\t\t\t|| event instanceof NavigationError) {\n\t\t\t\t\tif (this.instances?.length) {\n\t\t\t\t\t\tconst root = this.instances[0];\n\t\t\t\t\t\troot.pushChanges();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttakeUntil(this.unsubscribe$),\n\t\t).subscribe();\n\t\tRouterService.navigate(`${window.location.pathname}${window.location.search}${window.location.hash}`);\n\t}\n\n\tstatic meta: IModuleMeta = {\n\t\tdeclarations: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t],\n\t\texports: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t]\n\t};\n\n\tstatic forRoot(routes: IRoute[]): typeof RouterModule {\n\t\tRouterService.setRoutes(routes);\n\t\treturn RouterModule;\n\t}\n\n\tstatic useStrategy(locationStrategyType: typeof LocationStrategy): typeof RouterModule {\n\t\tRouterService.useLocationStrategy(locationStrategyType);\n\t\treturn this;\n\t}\n}\n","import { Observable } from 'rxjs';\n\nexport enum RouteLocationStrategy {\n    Path = 'path',\n    Hash = 'hash',\n}\nexport type RouteComponent = string | number | { [key: string]: any; };\nexport type RouterLink = string | RouteComponent[];\nexport type RouterActivator = Observable<boolean> | (() => boolean) | boolean;\nexport type RouterActivatorResult = Observable<boolean | RouteComponent[]> | Promise<boolean | RouteComponent[]> | boolean | RouteComponent[];\nexport type RouterKeyValue = { [key: string]: RouterKeyValue | string | null };\nexport type Params = { [key: string]: any; };\nexport type Data = { [key: string]: any; };\n\n","import { isPlatformBrowser } from 'rxcomp';\nimport { Observable, Observer } from 'rxjs';\n\nexport function transition$(callback: (complete: (result: boolean) => void) => void) {\n    return Observable.create(function (observer: Observer<boolean>) {\n        // let subscription: Subscription;\n        try {\n            if (isPlatformBrowser) {\n                callback((result: boolean) => {\n                    observer.next(result);\n                    observer.complete();\n                });\n            } else {\n                observer.next(true);\n                observer.complete();\n            }\n        } catch (error) {\n            observer.error(error);\n        }\n        /*\n        return () => {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        }\n        */\n    });\n}","import { Component, errors$, getContext, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\n\nexport default class AppComponent extends Component {\n\terror: any = null;\n\n\tonInit() {\n\t\t// console.log('AppComponent.onInit', this);\n\t\tconst { node } = getContext(this);\n\t\tnode.classList.add('init');\n\t\terrors$.pipe(\n\t\t\ttakeUntil(this.unsubscribe$),\n\t\t).subscribe(error => {\n\t\t\tthis.error = error;\n\t\t\tthis.pushChanges();\n\t\t});\n\t}\n\n\tstatic meta: IFactoryMeta = {\n\t\tselector: '[app-component]',\n\t};\n}\n","import { Component } from 'rxcomp';\nimport { ICanActivate, ICanActivateChild, ICanDeactivate, ICanLoad, RouterActivatorResult, RouteSegment, RouteSnapshot } from '../../../../src/rxcomp-router';\n\nexport class CustomActivator implements ICanActivate, ICanDeactivate<Component>, ICanActivateChild, ICanLoad {\n    canDeactivate<T>(component: T, currentRoute: RouteSnapshot): RouterActivatorResult {\n        // console.log('canDeactivate', component, currentRoute);\n        return true;\n    }\n    canLoad(route: RouteSnapshot, segments: RouteSegment[]): RouterActivatorResult {\n        // console.log('canLoad', route, segments);\n        return true;\n    }\n    canActivate(route: RouteSnapshot): RouterActivatorResult {\n        // console.log('canActivate', route);\n        return ['/dashboard'];\n    }\n    canActivateChild(childRoute: RouteSnapshot): RouterActivatorResult {\n        // console.log('canActivateChild', childRoute);\n        return childRoute.path === 'media' ? ['files'] : true;\n    }\n}\n\nexport const customActivator: CustomActivator = new CustomActivator();\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class ContactsComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            route.data$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((data: RouterKeyValue) => {\n                this.title = data.title;\n                // this.pushChanges(); // !!not needed;\n                // console.log('ContactsComponent', data);\n            });\n        }\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[contacts-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-contacts\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { combineLatest } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class DataComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            combineLatest(route.data$, route.params$).pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((datas: RouterKeyValue[]) => {\n                this.title = datas[0].title;\n                this.params = datas[1];\n                // this.pushChanges(); // !!not needed;\n                // console.log('DataComponent', datas);\n            });\n        }\n        /*\n        this.host.route?.data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n        this.host.route?.params$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((params) => this.params = params);\n        */\n    }\n    static meta: IFactoryMeta = {\n        selector: '[data-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-data\">\n            <div class=\"title\">{{title}}</div>\n            <div class=\"params\">{{params | json}}</div>\n        </div>\n        `,\n    };\n}\n","import 'gsap';\nimport { IElement, IFactoryMeta } from 'rxcomp';\nimport { combineLatest } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure, transition$, View } from '../../../../src/rxcomp-router';\nexport default class DetailComponent extends View {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            combineLatest(route.data$, route.params$).pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((datas: RouterKeyValue[]) => {\n                this.title = datas[0].title;\n                this.detailId = datas[1].detailId;\n                // this.pushChanges(); // !!not needed;\n                // console.log('DetailComponent', datas);\n            });\n        }\n        /*\n        (this.host.route as RouteSnapshot).data$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((data) => this.title = data.title);\n        (this.host.route as RouteSnapshot).params$.pipe(\n            takeUntil(this.unsubscribe$),\n        ).subscribe((params) => this.detailId = params.detailId);\n        */\n    }\n    onEnter(node: IElement) {\n        return transition$(complete => {\n            gsap.set(node, { opacity: 0 });\n            gsap.to(node, {\n                opacity: 1,\n                duration: 1,\n                ease: Power3.easeInOut,\n                onComplete: () => {\n                    complete(true);\n                }\n            });\n        });\n    }\n    onExit(node: IElement) {\n        return transition$(complete => {\n            gsap.set(node, { opacity: 1 });\n            gsap.to(node, {\n                opacity: 0,\n                duration: 1,\n                ease: Power3.easeInOut,\n                onComplete: () => {\n                    complete(true);\n                }\n            });\n        });\n    }\n    static meta: IFactoryMeta = {\n        selector: '[detail-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-detail\">\n            <div class=\"title\">Detail {{detailId}}</div>\n            <ul class=\"nav--menu\">\n                <li><a routerLink=\"media\" routerLinkActive=\"active\">Media</a></li>\n                <li><a routerLink=\"files\" routerLinkActive=\"active\">Files</a></li>\n            </ul>\n            <router-outlet></router-outlet>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class IndexComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            route.data$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((data: RouterKeyValue) => {\n                this.title = data.title;\n                // this.pushChanges(); // !!not needed;\n                // console.log('IndexComponent', data);\n            });\n        }\n    }\n    static meta: IFactoryMeta = {\n        selector: '[index-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-index\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class NotFoundComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        // console.log('NotFoundComponent.onInit');\n    }\n\n    static meta: IFactoryMeta = {\n        selector: '[not-found-component]',\n        template: /* html */`\n        <div class=\"page-not-found\">\n            <div class=\"title\">Not Found</div>\n        </div>\n        `,\n    };\n}\n","import { Component, IFactoryMeta } from 'rxcomp';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterKeyValue, RouterOutletStructure } from '../../../../src/rxcomp-router';\n\nexport default class SubComponent extends Component {\n    host!: RouterOutletStructure;\n    onInit() {\n        const route = this.host.route;\n        if (route) {\n            route.data$.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((data: RouterKeyValue) => {\n                this.title = data.title;\n                // this.pushChanges(); // !!not needed;\n                // console.log('SubComponent', data);\n            });\n        }\n    }\n    static meta: IFactoryMeta = {\n        selector: '[sub-component]',\n        hosts: { host: RouterOutletStructure },\n        template: /* html */`\n        <div class=\"page-sub\">\n            <div class=\"title\">{{title}}</div>\n        </div>\n        `,\n    };\n}\n","import { CoreModule, IModuleMeta, Module } from 'rxcomp';\nimport { RouterModule } from '../../../src/rxcomp-router';\nimport AppComponent from './app.component';\nimport { customActivator } from './custom-activator/custom-activator';\nimport ContactsComponent from './pages/contacts.component';\nimport DataComponent from './pages/data.component';\nimport DetailComponent from './pages/detail.component';\nimport IndexComponent from './pages/index.component';\nimport NotFoundComponent from './pages/not-found.component';\nimport SubComponent from './pages/sub.component';\n\nexport default class AppModule extends Module {\n\tstatic meta: IModuleMeta = {\n\t\timports: [\n\t\t\tCoreModule,\n\t\t\tRouterModule.forRoot([\n\t\t\t\t{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\t\t\t\t{ path: 'dashboard', component: IndexComponent, data: { title: 'Dashboard' } },\n\t\t\t\t{\n\t\t\t\t\tpath: 'detail/:detailId', component: DetailComponent, data: { title: 'Detail' },\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{ path: 'media', component: SubComponent, data: { title: 'Media' } },\n\t\t\t\t\t\t{ path: 'files', component: SubComponent, data: { title: 'Files' } }\n\t\t\t\t\t],\n\t\t\t\t\tcanActivateChild: [customActivator],\n\t\t\t\t},\n\t\t\t\t{ path: 'data/:data', component: DataComponent, data: { title: 'Data' } },\n\t\t\t\t{ path: 'contacts', component: ContactsComponent, data: { title: 'Contacts' }, canActivate: [customActivator] },\n\t\t\t\t{ path: '**', component: NotFoundComponent },\n\t\t\t]),\n\t\t],\n\t\tdeclarations: [\n\t\t\tIndexComponent,\n\t\t\tDataComponent,\n\t\t\tDetailComponent,\n\t\t\tContactsComponent,\n\t\t],\n\t\tbootstrap: AppComponent,\n\t};\n\n}\n","import { Browser } from 'rxcomp';\nimport AppModule from './app.module';\n\nBrowser.bootstrap(AppModule);\n"]}